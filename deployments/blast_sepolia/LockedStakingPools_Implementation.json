{
  "address": "0x722A34C8949623073838136F2AE9bc55f3815678",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArguments",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidTokenAmounts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStaking",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NotPoolAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolNotExisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalYield",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YIELD_DENOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "addLockedPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "addSupportYieldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimNativeYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILockedStaking.StakingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStakedTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "roleControl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "noUsersStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayWithStakeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayWithYieldToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "name": "setPoolYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yieldTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b33fa7cae26ae7b5f7877ceccd42188118a9ffaf53ee4d2fb7cca32b933f240",
  "receipt": {
    "to": null,
    "from": "0x482bE3Ec3A24eE4FEc390576473dbc9DaD2E6d66",
    "contractAddress": "0x722A34C8949623073838136F2AE9bc55f3815678",
    "transactionIndex": 3,
    "gasUsed": "3086020",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdb4ca8fd5b84665a7948f9e675ab73b77ed081f45d994b39067eaeb267ad19fb",
    "transactionHash": "0x6b33fa7cae26ae7b5f7877ceccd42188118a9ffaf53ee4d2fb7cca32b933f240",
    "logs": [],
    "blockNumber": 1033213,
    "cumulativeGasUsed": "3283860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "9014050214a98c78822ff9ce31cc725e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotPoolAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolNotExisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"addLockedPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"addSupportYieldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNativeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILockedStaking.StakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakedTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roleControl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noUsersStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayWithStakeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayWithYieldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"setPoolYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockedStakingPools.sol\":\"LockedStakingPools\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/LockedStakingPools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interface/IRoleControl.sol\\\";\\nimport \\\"./interface/IERC20Mintable.sol\\\";\\nimport \\\"./interface/ILockedStaking.sol\\\";\\nimport \\\"./interface/IBlast.sol\\\";\\n\\ncontract LockedStakingPools is Initializable, ILockedStaking {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant YIELD_DENOM = 100000;\\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256(\\\"POOL_ADMIN_ROLE\\\");\\n\\n  IRoleControl roleControl;\\n  address public treasury;\\n  uint256 public nextPoolId;\\n  mapping(uint256 => LockedPoolInfo) public poolInfo;\\n  mapping(uint256 => mapping(address => StakingInfo[])) stakeInfo;\\n  mapping(uint256 => mapping(address => uint256)) stakeTimes;\\n  mapping(uint256 => uint256) public noUsersStaked;\\n  mapping(address => address) public yieldTokens;\\n\\n  function init(address roleControl_, address treasury_) external initializer {\\n    roleControl = IRoleControl(roleControl_);\\n    if (treasury_ != address(0)) {\\n      IBlast(0x4300000000000000000000000000000000000002)\\n        .configureClaimableYield();\\n    }\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    if (!roleControl.hasRole(POOL_ADMIN_ROLE, msg.sender))\\n      revert NotPoolAdmin(msg.sender);\\n    _;\\n  }\\n\\n  function setTreasury(address _treasury) external onlyPoolAdmin {\\n    treasury = _treasury;\\n  }\\n\\n  function claimNativeYield() external onlyPoolAdmin {\\n    IBlast(0x4300000000000000000000000000000000000002).claimAllYield(\\n      address(this),\\n      treasury\\n    );\\n  }\\n\\n  function addSupportYieldTokens(\\n    address stakeToken,\\n    address yieldToken\\n  ) external onlyPoolAdmin {\\n    yieldTokens[stakeToken] = yieldToken;\\n  }\\n\\n  function addLockedPools(\\n    uint256 timelock,\\n    uint256 yieldAPY,\\n    address stakeToken\\n  ) external onlyPoolAdmin returns (uint256 poolId) {\\n    if (timelock == 0 || yieldAPY == 0) revert InvalidArguments();\\n    address yieldToken = yieldTokens[stakeToken];\\n    if (yieldToken == address(0)) revert InvalidArguments();\\n\\n    poolId = nextPoolId;\\n    poolInfo[poolId] = LockedPoolInfo(\\n      timelock,\\n      yieldAPY,\\n      yieldToken,\\n      stakeToken,\\n      0,\\n      true\\n    );\\n\\n    nextPoolId = poolId + 1;\\n\\n    emit PoolCreated(poolId, timelock, yieldAPY, yieldToken, stakeToken);\\n  }\\n\\n  function closePool(uint256 poolId) external onlyPoolAdmin {\\n    poolInfo[poolId].enabled = false;\\n  }\\n\\n  function setPoolYield(uint256 poolId, uint256 yield) external onlyPoolAdmin {\\n    if (poolId == 0 || yield == 0) revert InvalidArguments();\\n    if (poolInfo[poolId].timelock == 0) revert PoolNotExisted(poolId);\\n\\n    poolInfo[poolId].yieldAPY = yield;\\n  }\\n\\n  function _depositToken(address token, address from, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount != msg.value) revert InvalidTokenAmounts(amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, address(this), amount);\\n    }\\n  }\\n\\n  function _transferToken(address token, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (address(this).balance < amount) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n    } else {\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n  }\\n\\n  function _mintToken(address token, address to, uint256 amount) internal {\\n    IERC20Mintable(token).mint(to, amount);\\n  }\\n\\n  function getStakeInfo(\\n    uint256 poolId,\\n    address account,\\n    uint256 index\\n  ) external view returns (StakingInfo memory) {\\n    return stakeInfo[poolId][account][index];\\n  }\\n\\n  function getStakedTimes(\\n    uint256 poolId,\\n    address account\\n  ) external view returns (uint256) {\\n    return stakeInfo[poolId][account].length;\\n  }\\n\\n  function stake(uint256 poolId, uint256 amount) external payable {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0 || pool.enabled == false) revert PoolClosed(poolId);\\n\\n    uint256 yieldAmount = (amount * pool.yieldAPY * pool.timelock) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    StakingInfo memory staking = StakingInfo(\\n      amount,\\n      block.timestamp + pool.timelock,\\n      yieldAmount\\n    );\\n    stakeInfo[poolId][msg.sender].push(staking);\\n    poolInfo[poolId].totalStaked += amount;\\n    \\n    if (stakeTimes[poolId][msg.sender] == 0) {\\n      noUsersStaked[poolId] += 1;\\n    }\\n    stakeTimes[poolId][msg.sender] += 1;\\n\\n    _depositToken(pool.stakeToken, msg.sender, amount);\\n    _mintToken(pool.yieldToken, msg.sender, yieldAmount);\\n\\n    emit Stake(\\n      poolId,\\n      pool.timelock,\\n      pool.yieldAPY,\\n      pool.yieldToken,\\n      pool.stakeToken,\\n      amount\\n    );\\n  }\\n\\n  function unstake(uint256 poolId) external {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n\\n    StakingInfo[] storage stakes = stakeInfo[poolId][msg.sender];\\n    if (stakes.length == 0) revert NoStaking();\\n\\n    uint256 totalStaked = 0;\\n    uint256 unstakeTime = 0;\\n    for (int256 i = int256(stakes.length) - 1; i >= 0; i--) {\\n      StakingInfo memory staked = stakes[uint256(i)];\\n\\n      if (staked.unlockTime <= block.timestamp) {\\n        unstakeTime += 1;\\n        totalStaked += staked.amount;\\n        \\n        // delete stake\\n        stakes[uint256(i)] = stakes[stakes.length - 1];\\n        stakes.pop();\\n      }\\n    }\\n\\n    poolInfo[poolId].totalStaked -= totalStaked;\\n    stakeTimes[poolId][msg.sender] -= 1;\\n    if (stakeTimes[poolId][msg.sender] == 0) {\\n      noUsersStaked[poolId] -= 1;\\n    }\\n\\n    if (totalStaked == 0) revert NoStaking();\\n\\n    _transferToken(pool.stakeToken, msg.sender, totalStaked);\\n\\n    emit Unstake(poolId, pool.stakeToken, totalStaked);\\n  }\\n\\n  function repayWithStakeToken(uint256 poolId, uint256 amount) external payable {\\n    if (msg.value != amount) revert InvalidTokenAmounts(amount);\\n\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n\\n    StakingInfo[] storage stakes = stakeInfo[poolId][msg.sender];\\n    if (stakes.length == 0) revert NoStaking();\\n\\n    uint256 totalStaked = 0;\\n    uint256 totalYield = 0;\\n    uint256 unstakeTime = 0;\\n    for (int256 i = int256(stakes.length) - 1; i >= 0; i--) {\\n      StakingInfo memory staked = stakes[uint256(i)];\\n\\n      if (totalYield + staked.yieldAmount <= amount) {\\n        unstakeTime += 1;\\n        totalStaked += staked.amount;\\n        totalYield += staked.yieldAmount;\\n\\n        // delete stake\\n        stakes[uint256(i)] = stakes[stakes.length - 1];\\n        stakes.pop();\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    poolInfo[poolId].totalStaked -= totalStaked;\\n    stakeTimes[poolId][msg.sender] -= 1;\\n    if (stakeTimes[poolId][msg.sender] == 0) {\\n      noUsersStaked[poolId] -= 1;\\n    }\\n\\n    uint256 remains = amount - totalYield;\\n    _depositToken(pool.stakeToken, msg.sender, amount);\\n    // return stake\\n    _transferToken(pool.stakeToken, msg.sender, totalStaked);\\n    // return spare\\n    _transferToken(pool.stakeToken, msg.sender, remains);\\n\\n    emit Repay(\\n      poolId,\\n      pool.stakeToken,\\n      totalStaked,\\n      totalYield\\n    );\\n  }\\n\\n  function repayWithYieldToken(uint256 poolId, uint256 amount) external {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n\\n    StakingInfo[] storage stakes = stakeInfo[poolId][msg.sender];\\n    if (stakes.length == 0) revert NoStaking();\\n\\n    uint256 totalStaked = 0;\\n    uint256 totalYield = 0;\\n    uint256 unstakeTime = 0;\\n    for (int256 i = int256(stakes.length) - 1; i >= 0; i--) {\\n      StakingInfo memory staked = stakes[uint256(i)];\\n\\n      if (totalYield + staked.yieldAmount <= amount) {\\n        unstakeTime += 1;\\n        totalStaked += staked.amount;\\n        totalYield += staked.yieldAmount;\\n\\n        // delete stake\\n        stakes[uint256(i)] = stakes[stakes.length - 1];\\n        stakes.pop();\\n      } else {\\n        break;\\n      }\\n    }\\n    \\n    poolInfo[poolId].totalStaked -= totalStaked;\\n    stakeTimes[poolId][msg.sender] -= 1;\\n    if (stakeTimes[poolId][msg.sender] == 0) {\\n      noUsersStaked[poolId] -= 1;\\n    }\\n\\n    uint256 remains = amount - totalYield;\\n    _depositToken(pool.yieldToken, msg.sender, amount);\\n    // return stake\\n    _transferToken(pool.stakeToken, msg.sender, totalStaked);\\n    // return spare yield\\n    _transferToken(pool.yieldToken, msg.sender, remains);\\n\\n    emit Repay(\\n      poolId,\\n      pool.stakeToken,\\n      totalStaked,\\n      totalYield\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd8e42936b69f48130755ec16000e4ca8fba18548bd823f057645faba4a3ec0b9\",\"license\":\"MIT\"},\"contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE \\n}\\n\\ninterface IBlast{\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\",\"keccak256\":\"0xb94a575fdf3be5029b157f43ffe585167d2d911777e6af156ef17b8441275d2f\",\"license\":\"MIT\"},\"contracts/interface/IERC20Mintable.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n  function mint(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x201e45d0d2667fbafebc8f21057ce9e708056f2cda3011a567b5c0b9d3553124\",\"license\":\"MIT\"},\"contracts/interface/ILockedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface ILockedStaking {\\n  error NotPoolAdmin(address user);\\n  error InvalidArguments();\\n  error InvalidTokenAmounts(uint256 amount);\\n  error PoolClosed(uint256 id);\\n  error PoolNotExisted(uint256 id);\\n  error NoStaking();\\n\\n  struct LockedPoolInfo {\\n    uint256 timelock;\\n    uint256 yieldAPY;\\n    address yieldToken;\\n    address stakeToken;\\n    uint256 totalStaked;\\n    bool enabled;\\n  }\\n\\n  struct StakingInfo {\\n    uint256 amount;\\n    uint256 unlockTime;\\n    uint256 yieldAmount;\\n  }\\n\\n  event PoolCreated(\\n    uint256 id,\\n    uint256 timelock,\\n    uint256 yieldAPY,\\n    address yieldToken,\\n    address stakeToken\\n  );\\n\\n  event Stake(\\n    uint256 poolId,\\n    uint256 timelock,\\n    uint256 yield,\\n    address yieldToken,\\n    address stakeToken,\\n    uint256 amount\\n  );\\n\\n  event Unstake(\\n    uint256 poolId,\\n    address stakeToken,\\n    uint256 totalAmount\\n  );\\n\\n  event Repay(\\n    uint256 poolId,\\n    address token,\\n    uint256 totalStaked,\\n    uint256 totalYield\\n  );\\n\\n  function stake(uint256 poolId, uint256 amount) external payable;\\n\\n  function unstake(uint256 poolId) external;\\n}\\n\",\"keccak256\":\"0x6d0629fdccc7ab815f3fb1ed4b7af0cdbdc54ebe82ccffac2a7658ca1e63ae74\",\"license\":\"MIT\"},\"contracts/interface/IRoleControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IRoleControl is IAccessControl {\\n  \\n}\\n\",\"keccak256\":\"0x96b1f3c3213c5364a4f2a8a86ef2b582250684eb790964bc6ac7d776e5310ab1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613713806100206000396000f3fe60806040526004361061011f5760003560e01c80637e880fa6116100a0578063c6cf7c5f11610064578063c6cf7c5f146103ba578063c7936e35146103f7578063d225481314610434578063f09a40161461045f578063f0f44260146104885761011f565b80637e880fa6146102c357806394caca16146103005780639a45228f14610329578063b8f6dba714610352578063c5f213361461037d5761011f565b80632e17de78116100e75780632e17de781461020e57806337bb397e1461023757806337de615f1461025357806361d027b31461027c5780637b0472f0146102a75761011f565b80630dfe85d8146101245780630f5baf61146101615780631526fe271461017857806318e56131146101ba57806326ea6a8e146101e5575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612daa565b6104b1565b6040516101589190612de6565b60405180910390f35b34801561016d57600080fd5b506101766104c9565b005b34801561018457600080fd5b5061019f600480360381019061019a9190612daa565b61067d565b6040516101b196959493929190612e5d565b60405180910390f35b3480156101c657600080fd5b506101cf610706565b6040516101dc9190612de6565b60405180910390f35b3480156101f157600080fd5b5061020c60048036038101906102079190612ebe565b61070c565b005b34801561021a57600080fd5b5061023560048036038101906102309190612daa565b610c1d565b005b610251600480360381019061024c9190612ebe565b61110d565b005b34801561025f57600080fd5b5061027a60048036038101906102759190612daa565b611662565b005b34801561028857600080fd5b50610291611791565b60405161029e9190612efe565b60405180910390f35b6102c160048036038101906102bc9190612ebe565b6117b7565b005b3480156102cf57600080fd5b506102ea60048036038101906102e59190612f45565b611bbe565b6040516102f79190612de6565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190612f98565b611f6c565b005b34801561033557600080fd5b50610350600480360381019061034b9190612ebe565b6120eb565b005b34801561035e57600080fd5b506103676122a8565b6040516103749190612ff1565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f919061300c565b6122cc565b6040516103b19190612de6565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc919061304c565b61232a565b6040516103ee9190612efe565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190613079565b61235d565b60405161042b919061311d565b60405180910390f35b34801561044057600080fd5b50610449612407565b6040516104569190612de6565b60405180910390f35b34801561046b57600080fd5b5061048660048036038101906104819190612f98565b61240e565b005b34801561049457600080fd5b506104af60048036038101906104aa919061304c565b61267e565b005b60066020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610544929190613138565b602060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061318d565b6105c657336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016105bd9190612efe565b60405180910390fd5b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663860043b630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016106379291906131ba565b6020604051808303816000875af1158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a91906131f8565b50565b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900460ff16905086565b60025481565b6000600360008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050600081600001510361085c57826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016108539190612de6565b60405180910390fd5b60006004600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008180549050036108ee576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008060018580549050610905919061325e565b90505b60008112610a7b576000858281548110610925576109246132a1565b5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508781604001518561096f91906132d0565b11610a615760018361098191906132d0565b925080600001518561099391906132d0565b94508060400151846109a591906132d0565b935085600187805490506109b99190613304565b815481106109ca576109c96132a1565b5b90600052602060002090600302018683815481106109eb576109ea6132a1565b5b906000526020600020906003020160008201548160000155600182015481600101556002820154816002015590505085805480610a2b57610a2a613338565b5b60019003818190600052602060002090600302016000808201600090556001820160009055600282016000905550509055610a67565b50610a7b565b508080610a7390613367565b915050610908565b5082600360008981526020019081526020016000206004016000828254610aa29190613304565b9250508190555060016005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b0a9190613304565b9250508190555060006005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610b95576001600660008981526020019081526020016000206000828254610b8d9190613304565b925050819055505b60008287610ba39190613304565b9050610bb4866040015133896127bf565b610bc38660600151338661286f565b610bd28660400151338361286f565b7f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b08887606001518686604051610c0b94939291906133af565b60405180910390a15050505050505050565b6000600360008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090506000816000015103610d6d57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610d649190612de6565b60405180910390fd5b60006004600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000818054905003610dff576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600060018480549050610e15919061325e565b90505b60008112610f64576000848281548110610e3557610e346132a1565b5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905042816020015111610f5057600183610e8691906132d0565b9250806000015184610e9891906132d0565b93508460018680549050610eac9190613304565b81548110610ebd57610ebc6132a1565b5b9060005260206000209060030201858381548110610ede57610edd6132a1565b5b906000526020600020906003020160008201548160000155600182015481600101556002820154816002015590505084805480610f1e57610f1d613338565b5b600190038181906000526020600020906003020160008082016000905560018201600090556002820160009055505090555b508080610f5c90613367565b915050610e18565b5081600360008781526020019081526020016000206004016000828254610f8b9190613304565b9250508190555060016005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ff39190613304565b9250508190555060006005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361107e5760016006600087815260200190815260200160002060008282546110769190613304565b925050819055505b600082036110b8576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110c78460600151338461286f565b7f15e1b1e6a67db05b5e4e898cc13f87b8485df622bfebf03d1508efa026a2e15c858560600151846040516110fe939291906133f4565b60405180910390a15050505050565b80341461115157806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016111489190612de6565b60405180910390fd5b6000600360008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff161515151581525050905060008160000151036112a157826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016112989190612de6565b60405180910390fd5b60006004600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000818054905003611333576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000806001858054905061134a919061325e565b90505b600081126114c057600085828154811061136a576113696132a1565b5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050878160400151856113b491906132d0565b116114a6576001836113c691906132d0565b92508060000151856113d891906132d0565b94508060400151846113ea91906132d0565b935085600187805490506113fe9190613304565b8154811061140f5761140e6132a1565b5b90600052602060002090600302018683815481106114305761142f6132a1565b5b9060005260206000209060030201600082015481600001556001820154816001015560028201548160020155905050858054806114705761146f613338565b5b600190038181906000526020600020906003020160008082016000905560018201600090556002820160009055505090556114ac565b506114c0565b5080806114b890613367565b91505061134d565b50826003600089815260200190815260200160002060040160008282546114e79190613304565b9250508190555060016005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154f9190613304565b9250508190555060006005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036115da5760016006600089815260200190815260200160002060008282546115d29190613304565b925050819055505b600082876115e89190613304565b90506115f9866060015133896127bf565b6116088660600151338661286f565b6116178660600151338361286f565b7f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b0888760600151868660405161165094939291906133af565b60405180910390a15050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016116dd929190613138565b602060405180830381865afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e919061318d565b61175f57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016117569190612efe565b60405180910390fd5b60006003600083815260200190815260200160002060050160006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090506000816000015114806118d95750600015158160a001511515145b1561191b57826040517f925a19750000000000000000000000000000000000000000000000000000000081526004016119129190612de6565b60405180910390fd5b60006201518061016d620186a0846000015185602001518761193d919061342b565b611947919061342b565b611951919061349c565b61195b919061349c565b611965919061349c565b90506000604051806060016040528085815260200184600001514261198a91906132d0565b81526020018381525090506004600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505083600360008781526020019081526020016000206004016000828254611a5591906132d0565b9250508190555060006005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403611ae0576001600660008781526020019081526020016000206000828254611ad891906132d0565b925050819055505b60016005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4191906132d0565b92505081905550611b57836060015133866127bf565b611b6683604001513384612965565b7f270e35e4409491803f7d62d407a05a27d52e618243e76f78f3881d63f93c492285846000015185602001518660400151876060015189604051611baf969594939291906134cd565b60405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611c3c929190613138565b602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d919061318d565b611cbe57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611cb59190612efe565b60405180910390fd5b6000841480611ccd5750600083145b15611d04576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dce576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025491506040518060c001604052808681526020018581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016001151581525060036000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050600182611f1f91906132d0565b6002819055507faec16eea69e3a8763af09e92376830a1b7d14ea846be92dc9998f419c5f03a1e8286868487604051611f5c95949392919061352e565b60405180910390a1509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611fe7929190613138565b602060405180830381865afa158015612004573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612028919061318d565b61206957336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016120609190612efe565b60405180910390fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401612166929190613138565b602060405180830381865afa158015612183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a7919061318d565b6121e857336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016121df9190612efe565b60405180910390fd5b60008214806121f75750600081145b1561222e576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060036000848152602001908152602001600020600001540361228957816040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016122809190612de6565b60405180910390fd5b8060036000848152602001908152602001600020600101819055505050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b60006004600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905092915050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612365612d4e565b6004600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106123c7576123c66132a1565b5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090509392505050565b620186a081565b60006124186129d7565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156124665750825b9050600060018367ffffffffffffffff1614801561249b575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156124a9575080155b156124e0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156125305760018560000160086101000a81548160ff0219169083151502179055505b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126195773430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561260057600080fd5b505af1158015612614573d6000803e3d6000fd5b505050505b83156126755760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161266c91906135da565b60405180910390a15b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016126f9929190613138565b602060405180830381865afa158015612716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273a919061318d565b61277b57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016127729190612efe565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361283c5734811461283757806040517f83b9f0ae00000000000000000000000000000000000000000000000000000000815260040161282e9190612de6565b60405180910390fd5b61286a565b6128698230838673ffffffffffffffffffffffffffffffffffffffff166129ff909392919063ffffffff16565b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361293457804710156128e857806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016128df9190612de6565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561292e573d6000803e3d6000fd5b50612960565b61295f82828573ffffffffffffffffffffffffffffffffffffffff16612a819092919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016129a09291906135f5565b600060405180830381600087803b1580156129ba57600080fd5b505af11580156129ce573d6000803e3d6000fd5b50505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612a7b848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401612a349392919061361e565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b00565b50505050565b612afb838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612ab49291906135f5565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b00565b505050565b6000612b2b828473ffffffffffffffffffffffffffffffffffffffff16612b9790919063ffffffff16565b90506000815114158015612b50575080806020019051810190612b4e919061318d565b155b15612b9257826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612b899190612efe565b60405180910390fd5b505050565b6060612ba583836000612bad565b905092915050565b606081471015612bf457306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612beb9190612efe565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612c1d91906136c6565b60006040518083038185875af1925050503d8060008114612c5a576040519150601f19603f3d011682016040523d82523d6000602084013e612c5f565b606091505b5091509150612c6f868383612c7a565b925050509392505050565b606082612c8f57612c8a82612d09565b612d01565b60008251148015612cb7575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612cf957836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612cf09190612efe565b60405180910390fd5b819050612d02565b5b9392505050565b600081511115612d1c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b6000819050919050565b612d8781612d74565b8114612d9257600080fd5b50565b600081359050612da481612d7e565b92915050565b600060208284031215612dc057612dbf612d6f565b5b6000612dce84828501612d95565b91505092915050565b612de081612d74565b82525050565b6000602082019050612dfb6000830184612dd7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e2c82612e01565b9050919050565b612e3c81612e21565b82525050565b60008115159050919050565b612e5781612e42565b82525050565b600060c082019050612e726000830189612dd7565b612e7f6020830188612dd7565b612e8c6040830187612e33565b612e996060830186612e33565b612ea66080830185612dd7565b612eb360a0830184612e4e565b979650505050505050565b60008060408385031215612ed557612ed4612d6f565b5b6000612ee385828601612d95565b9250506020612ef485828601612d95565b9150509250929050565b6000602082019050612f136000830184612e33565b92915050565b612f2281612e21565b8114612f2d57600080fd5b50565b600081359050612f3f81612f19565b92915050565b600080600060608486031215612f5e57612f5d612d6f565b5b6000612f6c86828701612d95565b9350506020612f7d86828701612d95565b9250506040612f8e86828701612f30565b9150509250925092565b60008060408385031215612faf57612fae612d6f565b5b6000612fbd85828601612f30565b9250506020612fce85828601612f30565b9150509250929050565b6000819050919050565b612feb81612fd8565b82525050565b60006020820190506130066000830184612fe2565b92915050565b6000806040838503121561302357613022612d6f565b5b600061303185828601612d95565b925050602061304285828601612f30565b9150509250929050565b60006020828403121561306257613061612d6f565b5b600061307084828501612f30565b91505092915050565b60008060006060848603121561309257613091612d6f565b5b60006130a086828701612d95565b93505060206130b186828701612f30565b92505060406130c286828701612d95565b9150509250925092565b6130d581612d74565b82525050565b6060820160008201516130f160008501826130cc565b50602082015161310460208501826130cc565b50604082015161311760408501826130cc565b50505050565b600060608201905061313260008301846130db565b92915050565b600060408201905061314d6000830185612fe2565b61315a6020830184612e33565b9392505050565b61316a81612e42565b811461317557600080fd5b50565b60008151905061318781613161565b92915050565b6000602082840312156131a3576131a2612d6f565b5b60006131b184828501613178565b91505092915050565b60006040820190506131cf6000830185612e33565b6131dc6020830184612e33565b9392505050565b6000815190506131f281612d7e565b92915050565b60006020828403121561320e5761320d612d6f565b5b600061321c848285016131e3565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061326982613225565b915061327483613225565b925082820390508181126000841216828213600085121516171561329b5761329a61322f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132db82612d74565b91506132e683612d74565b92508282019050808211156132fe576132fd61322f565b5b92915050565b600061330f82612d74565b915061331a83612d74565b92508282039050818111156133325761333161322f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061337282613225565b91507f800000000000000000000000000000000000000000000000000000000000000082036133a4576133a361322f565b5b600182039050919050565b60006080820190506133c46000830187612dd7565b6133d16020830186612e33565b6133de6040830185612dd7565b6133eb6060830184612dd7565b95945050505050565b60006060820190506134096000830186612dd7565b6134166020830185612e33565b6134236040830184612dd7565b949350505050565b600061343682612d74565b915061344183612d74565b925082820261344f81612d74565b915082820484148315176134665761346561322f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134a782612d74565b91506134b283612d74565b9250826134c2576134c161346d565b5b828204905092915050565b600060c0820190506134e26000830189612dd7565b6134ef6020830188612dd7565b6134fc6040830187612dd7565b6135096060830186612e33565b6135166080830185612e33565b61352360a0830184612dd7565b979650505050505050565b600060a0820190506135436000830188612dd7565b6135506020830187612dd7565b61355d6040830186612dd7565b61356a6060830185612e33565b6135776080830184612e33565b9695505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006135c46135bf6135ba84613581565b61359f565b61358b565b9050919050565b6135d4816135a9565b82525050565b60006020820190506135ef60008301846135cb565b92915050565b600060408201905061360a6000830185612e33565b6136176020830184612dd7565b9392505050565b60006060820190506136336000830186612e33565b6136406020830185612e33565b61364d6040830184612dd7565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561368957808201518184015260208101905061366e565b60008484015250505050565b60006136a082613655565b6136aa8185613660565b93506136ba81856020860161366b565b80840191505092915050565b60006136d28284613695565b91508190509291505056fea26469706673582212202cf9daf88d894047be9dd20ff25ccd74be49578157a4558edebbf096c30d870a64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80637e880fa6116100a0578063c6cf7c5f11610064578063c6cf7c5f146103ba578063c7936e35146103f7578063d225481314610434578063f09a40161461045f578063f0f44260146104885761011f565b80637e880fa6146102c357806394caca16146103005780639a45228f14610329578063b8f6dba714610352578063c5f213361461037d5761011f565b80632e17de78116100e75780632e17de781461020e57806337bb397e1461023757806337de615f1461025357806361d027b31461027c5780637b0472f0146102a75761011f565b80630dfe85d8146101245780630f5baf61146101615780631526fe271461017857806318e56131146101ba57806326ea6a8e146101e5575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612daa565b6104b1565b6040516101589190612de6565b60405180910390f35b34801561016d57600080fd5b506101766104c9565b005b34801561018457600080fd5b5061019f600480360381019061019a9190612daa565b61067d565b6040516101b196959493929190612e5d565b60405180910390f35b3480156101c657600080fd5b506101cf610706565b6040516101dc9190612de6565b60405180910390f35b3480156101f157600080fd5b5061020c60048036038101906102079190612ebe565b61070c565b005b34801561021a57600080fd5b5061023560048036038101906102309190612daa565b610c1d565b005b610251600480360381019061024c9190612ebe565b61110d565b005b34801561025f57600080fd5b5061027a60048036038101906102759190612daa565b611662565b005b34801561028857600080fd5b50610291611791565b60405161029e9190612efe565b60405180910390f35b6102c160048036038101906102bc9190612ebe565b6117b7565b005b3480156102cf57600080fd5b506102ea60048036038101906102e59190612f45565b611bbe565b6040516102f79190612de6565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190612f98565b611f6c565b005b34801561033557600080fd5b50610350600480360381019061034b9190612ebe565b6120eb565b005b34801561035e57600080fd5b506103676122a8565b6040516103749190612ff1565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f919061300c565b6122cc565b6040516103b19190612de6565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc919061304c565b61232a565b6040516103ee9190612efe565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190613079565b61235d565b60405161042b919061311d565b60405180910390f35b34801561044057600080fd5b50610449612407565b6040516104569190612de6565b60405180910390f35b34801561046b57600080fd5b5061048660048036038101906104819190612f98565b61240e565b005b34801561049457600080fd5b506104af60048036038101906104aa919061304c565b61267e565b005b60066020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610544929190613138565b602060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061318d565b6105c657336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016105bd9190612efe565b60405180910390fd5b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663860043b630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016106379291906131ba565b6020604051808303816000875af1158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a91906131f8565b50565b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900460ff16905086565b60025481565b6000600360008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff1615151515815250509050600081600001510361085c57826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016108539190612de6565b60405180910390fd5b60006004600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008180549050036108ee576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008060018580549050610905919061325e565b90505b60008112610a7b576000858281548110610925576109246132a1565b5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090508781604001518561096f91906132d0565b11610a615760018361098191906132d0565b925080600001518561099391906132d0565b94508060400151846109a591906132d0565b935085600187805490506109b99190613304565b815481106109ca576109c96132a1565b5b90600052602060002090600302018683815481106109eb576109ea6132a1565b5b906000526020600020906003020160008201548160000155600182015481600101556002820154816002015590505085805480610a2b57610a2a613338565b5b60019003818190600052602060002090600302016000808201600090556001820160009055600282016000905550509055610a67565b50610a7b565b508080610a7390613367565b915050610908565b5082600360008981526020019081526020016000206004016000828254610aa29190613304565b9250508190555060016005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b0a9190613304565b9250508190555060006005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610b95576001600660008981526020019081526020016000206000828254610b8d9190613304565b925050819055505b60008287610ba39190613304565b9050610bb4866040015133896127bf565b610bc38660600151338661286f565b610bd28660400151338361286f565b7f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b08887606001518686604051610c0b94939291906133af565b60405180910390a15050505050505050565b6000600360008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090506000816000015103610d6d57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610d649190612de6565b60405180910390fd5b60006004600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000818054905003610dff576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600060018480549050610e15919061325e565b90505b60008112610f64576000848281548110610e3557610e346132a1565b5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905042816020015111610f5057600183610e8691906132d0565b9250806000015184610e9891906132d0565b93508460018680549050610eac9190613304565b81548110610ebd57610ebc6132a1565b5b9060005260206000209060030201858381548110610ede57610edd6132a1565b5b906000526020600020906003020160008201548160000155600182015481600101556002820154816002015590505084805480610f1e57610f1d613338565b5b600190038181906000526020600020906003020160008082016000905560018201600090556002820160009055505090555b508080610f5c90613367565b915050610e18565b5081600360008781526020019081526020016000206004016000828254610f8b9190613304565b9250508190555060016005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ff39190613304565b9250508190555060006005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361107e5760016006600087815260200190815260200160002060008282546110769190613304565b925050819055505b600082036110b8576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110c78460600151338461286f565b7f15e1b1e6a67db05b5e4e898cc13f87b8485df622bfebf03d1508efa026a2e15c858560600151846040516110fe939291906133f4565b60405180910390a15050505050565b80341461115157806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016111489190612de6565b60405180910390fd5b6000600360008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff161515151581525050905060008160000151036112a157826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016112989190612de6565b60405180910390fd5b60006004600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000818054905003611333576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000806001858054905061134a919061325e565b90505b600081126114c057600085828154811061136a576113696132a1565b5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050878160400151856113b491906132d0565b116114a6576001836113c691906132d0565b92508060000151856113d891906132d0565b94508060400151846113ea91906132d0565b935085600187805490506113fe9190613304565b8154811061140f5761140e6132a1565b5b90600052602060002090600302018683815481106114305761142f6132a1565b5b9060005260206000209060030201600082015481600001556001820154816001015560028201548160020155905050858054806114705761146f613338565b5b600190038181906000526020600020906003020160008082016000905560018201600090556002820160009055505090556114ac565b506114c0565b5080806114b890613367565b91505061134d565b50826003600089815260200190815260200160002060040160008282546114e79190613304565b9250508190555060016005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154f9190613304565b9250508190555060006005600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036115da5760016006600089815260200190815260200160002060008282546115d29190613304565b925050819055505b600082876115e89190613304565b90506115f9866060015133896127bf565b6116088660600151338661286f565b6116178660600151338361286f565b7f4e209d95368098bc8c8a8b0010964bca5d6789b67388238d3a2bad8e236e54b0888760600151868660405161165094939291906133af565b60405180910390a15050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016116dd929190613138565b602060405180830381865afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e919061318d565b61175f57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016117569190612efe565b60405180910390fd5b60006003600083815260200190815260200160002060050160006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008481526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff16151515158152505090506000816000015114806118d95750600015158160a001511515145b1561191b57826040517f925a19750000000000000000000000000000000000000000000000000000000081526004016119129190612de6565b60405180910390fd5b60006201518061016d620186a0846000015185602001518761193d919061342b565b611947919061342b565b611951919061349c565b61195b919061349c565b611965919061349c565b90506000604051806060016040528085815260200184600001514261198a91906132d0565b81526020018381525090506004600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505083600360008781526020019081526020016000206004016000828254611a5591906132d0565b9250508190555060006005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403611ae0576001600660008781526020019081526020016000206000828254611ad891906132d0565b925050819055505b60016005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4191906132d0565b92505081905550611b57836060015133866127bf565b611b6683604001513384612965565b7f270e35e4409491803f7d62d407a05a27d52e618243e76f78f3881d63f93c492285846000015185602001518660400151876060015189604051611baf969594939291906134cd565b60405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611c3c929190613138565b602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d919061318d565b611cbe57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611cb59190612efe565b60405180910390fd5b6000841480611ccd5750600083145b15611d04576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dce576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025491506040518060c001604052808681526020018581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016001151581525060036000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050600182611f1f91906132d0565b6002819055507faec16eea69e3a8763af09e92376830a1b7d14ea846be92dc9998f419c5f03a1e8286868487604051611f5c95949392919061352e565b60405180910390a1509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611fe7929190613138565b602060405180830381865afa158015612004573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612028919061318d565b61206957336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016120609190612efe565b60405180910390fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401612166929190613138565b602060405180830381865afa158015612183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a7919061318d565b6121e857336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016121df9190612efe565b60405180910390fd5b60008214806121f75750600081145b1561222e576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060036000848152602001908152602001600020600001540361228957816040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016122809190612de6565b60405180910390fd5b8060036000848152602001908152602001600020600101819055505050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b60006004600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905092915050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612365612d4e565b6004600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106123c7576123c66132a1565b5b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090509392505050565b620186a081565b60006124186129d7565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156124665750825b9050600060018367ffffffffffffffff1614801561249b575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156124a9575080155b156124e0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156125305760018560000160086101000a81548160ff0219169083151502179055505b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126195773430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561260057600080fd5b505af1158015612614573d6000803e3d6000fd5b505050505b83156126755760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161266c91906135da565b60405180910390a15b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016126f9929190613138565b602060405180830381865afa158015612716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273a919061318d565b61277b57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016127729190612efe565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361283c5734811461283757806040517f83b9f0ae00000000000000000000000000000000000000000000000000000000815260040161282e9190612de6565b60405180910390fd5b61286a565b6128698230838673ffffffffffffffffffffffffffffffffffffffff166129ff909392919063ffffffff16565b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361293457804710156128e857806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016128df9190612de6565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561292e573d6000803e3d6000fd5b50612960565b61295f82828573ffffffffffffffffffffffffffffffffffffffff16612a819092919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016129a09291906135f5565b600060405180830381600087803b1580156129ba57600080fd5b505af11580156129ce573d6000803e3d6000fd5b50505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612a7b848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401612a349392919061361e565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b00565b50505050565b612afb838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612ab49291906135f5565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b00565b505050565b6000612b2b828473ffffffffffffffffffffffffffffffffffffffff16612b9790919063ffffffff16565b90506000815114158015612b50575080806020019051810190612b4e919061318d565b155b15612b9257826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612b899190612efe565b60405180910390fd5b505050565b6060612ba583836000612bad565b905092915050565b606081471015612bf457306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612beb9190612efe565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612c1d91906136c6565b60006040518083038185875af1925050503d8060008114612c5a576040519150601f19603f3d011682016040523d82523d6000602084013e612c5f565b606091505b5091509150612c6f868383612c7a565b925050509392505050565b606082612c8f57612c8a82612d09565b612d01565b60008251148015612cb7575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612cf957836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612cf09190612efe565b60405180910390fd5b819050612d02565b5b9392505050565b600081511115612d1c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b6000819050919050565b612d8781612d74565b8114612d9257600080fd5b50565b600081359050612da481612d7e565b92915050565b600060208284031215612dc057612dbf612d6f565b5b6000612dce84828501612d95565b91505092915050565b612de081612d74565b82525050565b6000602082019050612dfb6000830184612dd7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e2c82612e01565b9050919050565b612e3c81612e21565b82525050565b60008115159050919050565b612e5781612e42565b82525050565b600060c082019050612e726000830189612dd7565b612e7f6020830188612dd7565b612e8c6040830187612e33565b612e996060830186612e33565b612ea66080830185612dd7565b612eb360a0830184612e4e565b979650505050505050565b60008060408385031215612ed557612ed4612d6f565b5b6000612ee385828601612d95565b9250506020612ef485828601612d95565b9150509250929050565b6000602082019050612f136000830184612e33565b92915050565b612f2281612e21565b8114612f2d57600080fd5b50565b600081359050612f3f81612f19565b92915050565b600080600060608486031215612f5e57612f5d612d6f565b5b6000612f6c86828701612d95565b9350506020612f7d86828701612d95565b9250506040612f8e86828701612f30565b9150509250925092565b60008060408385031215612faf57612fae612d6f565b5b6000612fbd85828601612f30565b9250506020612fce85828601612f30565b9150509250929050565b6000819050919050565b612feb81612fd8565b82525050565b60006020820190506130066000830184612fe2565b92915050565b6000806040838503121561302357613022612d6f565b5b600061303185828601612d95565b925050602061304285828601612f30565b9150509250929050565b60006020828403121561306257613061612d6f565b5b600061307084828501612f30565b91505092915050565b60008060006060848603121561309257613091612d6f565b5b60006130a086828701612d95565b93505060206130b186828701612f30565b92505060406130c286828701612d95565b9150509250925092565b6130d581612d74565b82525050565b6060820160008201516130f160008501826130cc565b50602082015161310460208501826130cc565b50604082015161311760408501826130cc565b50505050565b600060608201905061313260008301846130db565b92915050565b600060408201905061314d6000830185612fe2565b61315a6020830184612e33565b9392505050565b61316a81612e42565b811461317557600080fd5b50565b60008151905061318781613161565b92915050565b6000602082840312156131a3576131a2612d6f565b5b60006131b184828501613178565b91505092915050565b60006040820190506131cf6000830185612e33565b6131dc6020830184612e33565b9392505050565b6000815190506131f281612d7e565b92915050565b60006020828403121561320e5761320d612d6f565b5b600061321c848285016131e3565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061326982613225565b915061327483613225565b925082820390508181126000841216828213600085121516171561329b5761329a61322f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132db82612d74565b91506132e683612d74565b92508282019050808211156132fe576132fd61322f565b5b92915050565b600061330f82612d74565b915061331a83612d74565b92508282039050818111156133325761333161322f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061337282613225565b91507f800000000000000000000000000000000000000000000000000000000000000082036133a4576133a361322f565b5b600182039050919050565b60006080820190506133c46000830187612dd7565b6133d16020830186612e33565b6133de6040830185612dd7565b6133eb6060830184612dd7565b95945050505050565b60006060820190506134096000830186612dd7565b6134166020830185612e33565b6134236040830184612dd7565b949350505050565b600061343682612d74565b915061344183612d74565b925082820261344f81612d74565b915082820484148315176134665761346561322f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134a782612d74565b91506134b283612d74565b9250826134c2576134c161346d565b5b828204905092915050565b600060c0820190506134e26000830189612dd7565b6134ef6020830188612dd7565b6134fc6040830187612dd7565b6135096060830186612e33565b6135166080830185612e33565b61352360a0830184612dd7565b979650505050505050565b600060a0820190506135436000830188612dd7565b6135506020830187612dd7565b61355d6040830186612dd7565b61356a6060830185612e33565b6135776080830184612e33565b9695505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006135c46135bf6135ba84613581565b61359f565b61358b565b9050919050565b6135d4816135a9565b82525050565b60006020820190506135ef60008301846135cb565b92915050565b600060408201905061360a6000830185612e33565b6136176020830184612dd7565b9392505050565b60006060820190506136336000830186612e33565b6136406020830185612e33565b61364d6040830184612dd7565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561368957808201518184015260208101905061366e565b60008484015250505050565b60006136a082613655565b6136aa8185613660565b93506136ba81856020860161366b565b80840191505092915050565b60006136d28284613695565b91508190509291505056fea26469706673582212202cf9daf88d894047be9dd20ff25ccd74be49578157a4558edebbf096c30d870a64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1021,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "roleControl",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRoleControl)2408"
      },
      {
        "astId": 1023,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1025,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "nextPoolId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1030,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedPoolInfo)2338_storage)"
      },
      {
        "astId": 1038,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "stakeInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(StakingInfo)2345_storage)dyn_storage))"
      },
      {
        "astId": 1044,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "stakeTimes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1048,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "noUsersStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1052,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "yieldTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakingInfo)2345_storage)dyn_storage": {
        "base": "t_struct(StakingInfo)2345_storage",
        "encoding": "dynamic_array",
        "label": "struct ILockedStaking.StakingInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoleControl)2408": {
        "encoding": "inplace",
        "label": "contract IRoleControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(StakingInfo)2345_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILockedStaking.StakingInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakingInfo)2345_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(StakingInfo)2345_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ILockedStaking.StakingInfo[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(StakingInfo)2345_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(LockedPoolInfo)2338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILockedStaking.LockedPoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedPoolInfo)2338_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LockedPoolInfo)2338_storage": {
        "encoding": "inplace",
        "label": "struct ILockedStaking.LockedPoolInfo",
        "members": [
          {
            "astId": 2327,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "timelock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2329,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldAPY",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2331,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2333,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "stakeToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2335,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "totalStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2337,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "enabled",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(StakingInfo)2345_storage": {
        "encoding": "inplace",
        "label": "struct ILockedStaking.StakingInfo",
        "members": [
          {
            "astId": 2340,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2342,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2344,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}