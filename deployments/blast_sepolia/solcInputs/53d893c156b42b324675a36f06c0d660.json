{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/interface/IBlast.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nenum YieldMode {\n    AUTOMATIC,\n    VOID,\n    CLAIMABLE\n}\n\nenum GasMode {\n    VOID,\n    CLAIMABLE \n}\n\ninterface IBlast{\n    // configure\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\n\n    // base configuration options\n    function configureClaimableYield() external;\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\n    function configureAutomaticYield() external;\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\n    function configureVoidYield() external;\n    function configureVoidYieldOnBehalf(address contractAddress) external;\n    function configureClaimableGas() external;\n    function configureClaimableGasOnBehalf(address contractAddress) external;\n    function configureVoidGas() external;\n    function configureVoidGasOnBehalf(address contractAddress) external;\n    function configureGovernor(address _governor) external;\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\n\n    // claim yield\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\n\n    // claim gas\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\n\n    // read functions\n    function readClaimableYield(address contractAddress) external view returns (uint256);\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\n}\n"
    },
    "contracts/interface/IERC20Mintable.sol": {
      "content": "// // SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Mintable is IERC20 {\n  function mint(address _recipient, uint256 _amount) external;\n}"
    },
    "contracts/interface/IERC20Rebasing.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./IERC20Mintable.sol\";\n\nenum RebaseYieldMode {\n  AUTOMATIC,\n  VOID,\n  CLAIMABLE\n}\n\ninterface IERC20Rebasing is IERC20Mintable {\n  // changes the yield mode of the caller and update the balance\n  // to reflect the configuration\n  function configure(RebaseYieldMode) external returns (uint256);\n\n  // \"claimable\" yield mode accounts can call this this claim their yield\n  // to another address\n  function claim(address recipient, uint256 amount) external returns (uint256);\n\n  // read the claimable amount for an account\n  function getClaimableAmount(address account) external view returns (uint256);\n}\n"
    },
    "contracts/interface/ILockedStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface ILockedStaking {\n  error NotPoolAdmin(address user);\n  error InvalidArguments();\n  error TooManyStake();\n  error PoolClosed(uint256 id);\n  error PoolNotExisted(uint256 id);\n  error NoStaking();\n  error Locked(uint256 until);\n  error NotStaker(address user);\n  error InsufficientAmount(uint256 required);\n  error ExceededMaxDuration();\n\n  struct LockedPoolInfo {\n    uint256 timelock;\n    uint256 yieldAPY;\n    address yieldToken;\n    address stakeToken;\n    uint256 totalStaked;\n    uint256 nextStakeId;\n    bool enabled;\n  }\n\n  struct StakingInfo {\n    address user;\n    uint256 amount;\n    uint256 stakeTime;\n    uint256 unlockTime;\n    uint256 yieldAmount;\n    uint256 yieldDebt; // used for calculate generated yield\n  }\n\n  event PoolCreated(\n    uint256 id,\n    uint256 timelock,\n    uint256 yieldAPY,\n    address yieldToken,\n    address stakeToken\n  );\n\n  event Stake(\n    uint256 poolId,\n    uint256 stakeId,\n    uint256 timelock,\n    uint256 yield,\n    address yieldToken,\n    address stakeToken,\n    uint256 amount\n  );\n\n  event Unstake(\n    uint256 poolId,\n    uint256 stakeId,\n    address stakeToken,\n    uint256 totalAmount\n  );\n  \n  event Extend(\n    uint256 poolId,\n    uint256 stakeId,\n    uint256 duration\n  );\n\n  event Repay(\n    uint256 poolId,\n    uint256 stakeId,\n    address token,\n    uint256 totalStaked,\n    uint256 repayAmount\n  );\n\n  function stake(uint256 poolId, uint256 amount) external payable;\n\n  function unstake(uint256 poolId, uint256 stakeId) external;\n\n  function getGeneratedYield(\n    uint256 poolId,\n    uint256 stakeId\n  ) external view returns (uint256);\n\n  function repayWithStakeToken(\n    uint256 poolId,\n    uint256 stakeId\n  ) external payable;\n\n  function repayWithYieldToken(\n    uint256 poolId,\n    uint256 stakeId\n  ) external;\n}\n"
    },
    "contracts/interface/IRoleControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\ninterface IRoleControl is IAccessControl {\n  \n}\n"
    },
    "contracts/lib/TokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interface/IERC20Mintable.sol\";\n\nlibrary TokenTransfer {\n  using SafeERC20 for IERC20;\n  error InvalidTokenAmounts(uint256 amount);\n\n  function _depositToken(address token, address from, uint256 amount) internal {\n    if (token == address(0)) {\n      if (amount != msg.value) revert InvalidTokenAmounts(amount);\n    } else {\n      IERC20(token).safeTransferFrom(from, address(this), amount);\n    }\n  }\n\n  function _depositAndReturnSpare(address token, address from, address to, uint256 amount) internal {\n    if (token == address(0)) {\n      if (amount > msg.value) revert InvalidTokenAmounts(amount);\n      payable(to).transfer(amount);\n      payable(from).transfer(msg.value - amount);\n    } else {\n      IERC20(token).safeTransferFrom(from, to, amount);\n    }\n  }\n\n  function _transferToken(address token, address to, uint256 amount) internal {\n    if (token == address(0)) {\n      if (address(this).balance < amount) revert InvalidTokenAmounts(amount);\n      payable(to).transfer(amount);\n    } else {\n      IERC20(token).safeTransfer(to, amount);\n    }\n  }\n\n  function _mintToken(address token, address to, uint256 amount) internal {\n    IERC20Mintable(token).mint(to, amount);\n  }\n}\n"
    },
    "contracts/LockedStakingPools.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interface/IRoleControl.sol\";\nimport \"./interface/ILockedStaking.sol\";\nimport \"./interface/IBlast.sol\";\nimport \"./interface/IERC20Rebasing.sol\";\nimport \"./lib/TokenTransfer.sol\";\n\n/**\n * @dev Lock staking pool contract\n *\n */\ncontract LockedStakingPools is Initializable, ILockedStaking {\n  using SafeERC20 for IERC20;\n\n  uint256 public constant YIELD_DENOM = 100000;\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256(\"POOL_ADMIN_ROLE\");\n\n  IERC20Rebasing public USDB;\n  IBlast public blast;\n\n  IRoleControl roleControl;\n  address public treasury;\n  uint256 nextPoolId;\n  mapping(uint256 => LockedPoolInfo) public poolInfo;\n  mapping(uint256 => mapping(uint256 => StakingInfo)) stakeInfo;\n  mapping(uint256 => mapping(address => uint256[])) userStakeIds;\n  mapping(uint256 => uint256) public noUsersStaked;\n  mapping(address => address) public yieldTokens;\n  mapping(address => uint256) public tokenTotalStaked;\n  mapping(address => uint256) public accYieldPerStaked;\n\n  function init(address roleControl_, address treasury_) external initializer {\n    roleControl = IRoleControl(roleControl_);\n    treasury = treasury_;\n  }\n\n  modifier onlyPoolAdmin() {\n    if (!roleControl.hasRole(POOL_ADMIN_ROLE, msg.sender))\n      revert NotPoolAdmin(msg.sender);\n    _;\n  }\n\n  /**\n   * set USDB token address\n   *\n   * @param usdb USDB token address\n   */\n  function setUSDBRebasing(address usdb) external onlyPoolAdmin {\n    USDB = IERC20Rebasing(usdb);\n    USDB.configure(RebaseYieldMode.CLAIMABLE);\n  }\n\n  /**\n   * set native blast contract\n   *\n   * @param _blast blast address\n   */\n  function setBlast(address _blast) external onlyPoolAdmin {\n    blast = IBlast(_blast);\n    blast.configureClaimableYield();\n  }\n\n  /**\n   *\n   * set treasury address\n   * Treasury is the wallet used to receive all native yield\n   *\n   * @param _treasury treasury wallet address\n   */\n  function setTreasury(address _treasury) external onlyPoolAdmin {\n    treasury = _treasury;\n  }\n\n  /**\n   * Admin claims native yield and send to treasury address\n   */\n  function claimNativeYield() external onlyPoolAdmin {\n    blast.claimAllYield(address(this), treasury);\n  }\n\n  /**\n   * Admin claims native USDB yield and send to treasury address\n   */\n  function claimUSDBYield() external onlyPoolAdmin {\n    uint256 amount = USDB.getClaimableAmount(address(this));\n    USDB.claim(treasury, amount);\n  }\n\n  /**\n   * @dev Admin only - add stake and future yield token pair\n   *\n   * @param stakeToken address of token used to stake, `address(0)` for ETH\n   * @param yieldToken address of fyETH or fyUSDB token\n   */\n  function addSupportYieldTokens(\n    address stakeToken,\n    address yieldToken\n  ) external onlyPoolAdmin {\n    if (stakeToken != address(0) && stakeToken != address(USDB)) revert();\n    yieldTokens[stakeToken] = yieldToken;\n  }\n\n  /**\n   * @dev Admin only - add new staking pool\n   *\n   * @param timelock staking lock time in seconds\n   * @param yieldAPY yieldAPY\n   * @param stakeToken token address use for staking\n   */\n  function addLockedPools(\n    uint256 timelock,\n    uint256 yieldAPY,\n    address stakeToken\n  ) external onlyPoolAdmin returns (uint256 poolId) {\n    if (timelock == 0 || yieldAPY == 0) revert InvalidArguments();\n    address yieldToken = yieldTokens[stakeToken];\n    if (yieldToken == address(0)) revert InvalidArguments();\n\n    poolId = nextPoolId;\n    poolInfo[poolId] = LockedPoolInfo(\n      timelock,\n      yieldAPY,\n      yieldToken,\n      stakeToken,\n      0,\n      0,\n      true\n    );\n\n    nextPoolId = poolId + 1;\n\n    emit PoolCreated(poolId, timelock, yieldAPY, yieldToken, stakeToken);\n  }\n\n  /**\n   * @dev Admin only - close staking pools\n   * Closed pool will not accept new staking\n   *\n   * @param poolId poolId\n   */\n  function closePool(uint256 poolId) external onlyPoolAdmin {\n    poolInfo[poolId].enabled = false;\n  }\n\n  /**\n   * @dev Admin only - set pool yield APY\n   * @notice do not change pool APY after user start staking in the pool\n   *\n   * @param poolId poolId\n   * @param yield  yieldAPY\n   */\n  function setPoolYield(uint256 poolId, uint256 yield) external onlyPoolAdmin {\n    if (poolId == 0 || yield == 0) revert InvalidArguments();\n    if (poolInfo[poolId].timelock == 0) revert PoolNotExisted(poolId);\n\n    poolInfo[poolId].yieldAPY = yield;\n  }\n\n  /**\n   * @dev get total yield generated corresponding to staking tokens\n   *\n   * @param token staking token\n   */\n  function getYieldAmount(address token) internal view returns (uint256) {\n    if (token == address(0)) return blast.readClaimableYield(address(this));\n    else if (token == address(USDB))\n      return USDB.getClaimableAmount(address(this));\n    else return 0;\n  }\n\n  /**\n   * @dev claim yield token to treasury\n   *\n   * @param token staking token\n   */\n  function claimYield(address token) internal {\n    if (token == address(0)) {\n      blast.claimAllYield(address(this), treasury);\n    } else if (token == address(USDB)) {\n      uint256 amount = USDB.getClaimableAmount(address(this));\n      USDB.claim(treasury, amount);\n    }\n  }\n\n  /**\n   * @dev get amount of yield token generated by staking position\n   *\n   * @param poolId poolId\n   * @param stakeId staking Id\n   */\n  function getGeneratedYield(\n    uint256 poolId,\n    uint256 stakeId\n  ) external view override returns (uint256) {\n    StakingInfo memory staked = stakeInfo[poolId][stakeId];\n    LockedPoolInfo memory pool = poolInfo[poolId];\n    uint256 yield = getYieldAmount(pool.stakeToken);\n    uint256 yieldPerStaked = accYieldPerStaked[pool.stakeToken];\n    yieldPerStaked += (yield * 1e25) / tokenTotalStaked[pool.stakeToken];\n    return (staked.amount * yieldPerStaked) / 1e24 - staked.yieldDebt;\n  }\n\n  /**\n   * @dev get staking position info\n   *\n   * @param poolId poolId\n   * @param stakeId stakeId\n   */\n  function getStakeInfo(\n    uint256 poolId,\n    uint256 stakeId\n  ) external view returns (StakingInfo memory) {\n    return stakeInfo[poolId][stakeId];\n  }\n\n  /**\n   * @dev get user stake ids\n   * \n   * @param poolId poolId\n   * @param account account address\n   */\n  function getUserStakesIds(uint256 poolId, address account) external view returns (uint256[] memory) {\n    return userStakeIds[poolId][account];\n  }\n\n  function getUserStakeIdByIndex(uint256 poolId, address account, uint256 index) external view returns (uint256) {\n    return userStakeIds[poolId][account][index];\n  }\n\n  /**\n   * @dev get number of staking times of an account in a pool\n   *\n   * @param poolId poolId\n   * @param account account address\n   */\n  function stakeTimes(\n    uint256 poolId,\n    address account\n  ) external view returns (uint256) {\n    return userStakeIds[poolId][account].length;\n  }\n\n  function _updateAccYield(address stakeToken) internal {\n    uint256 totalStaked = tokenTotalStaked[stakeToken];\n    if (totalStaked != 0) {\n      uint256 yield = getYieldAmount(stakeToken);\n      accYieldPerStaked[stakeToken] += (yield * 1e24) / totalStaked;\n    }\n\n    claimYield(stakeToken);\n  }\n\n  function _deleteStakingInfo(uint256 poolId, uint256 stakeId) internal {\n    delete stakeInfo[poolId][stakeId];\n    uint256[] storage stakeIds = userStakeIds[poolId][msg.sender];\n    // remove stakeId from list\n    for (uint i; i < stakeIds.length; i++) {\n      if (stakeIds[i] == stakeId) {\n        stakeIds[i] = stakeIds[stakeIds.length - 1];\n        stakeIds.pop();\n        break;\n      }\n    }\n  }\n\n  /**\n   * @dev stake token into an pool with `poolId`\n   * @notice if staking ETH, amount of wei send to contract must be equal to `amount` param\n   *\n   * @param poolId poolId\n   * @param amount staking amount\n   */\n  function stake(uint256 poolId, uint256 amount) external payable {\n    if (amount == 0) revert InvalidArguments();\n\n    LockedPoolInfo memory pool = poolInfo[poolId];\n    if (pool.timelock == 0 || pool.enabled == false) revert PoolClosed(poolId);\n    _updateAccYield(pool.stakeToken);\n\n    uint256 yieldAmount = (amount * pool.yieldAPY * pool.timelock) /\n      YIELD_DENOM /\n      365 /\n      86400;\n\n    uint256 yieldDebt = (amount * accYieldPerStaked[pool.stakeToken]) / 1e24;\n\n    StakingInfo memory staking = StakingInfo(\n      msg.sender,\n      amount,\n      block.timestamp,\n      block.timestamp + pool.timelock,\n      yieldAmount,\n      yieldDebt\n    );\n\n    // --------------------- save stats data ---------------------------\n    uint256 stakeId = poolInfo[poolId].nextStakeId;\n    poolInfo[poolId].nextStakeId += 1;\n    stakeInfo[poolId][stakeId] = staking;\n\n    poolInfo[poolId].totalStaked += amount;\n    if (userStakeIds[poolId][msg.sender].length == 0) {\n      // revert if stake over 100 times in a pool to prevent out of gas when unstake\n      if (userStakeIds[poolId][msg.sender].length > 100) revert TooManyStake();\n      noUsersStaked[poolId] += 1;\n    }\n    userStakeIds[poolId][msg.sender].push(stakeId);\n    tokenTotalStaked[pool.stakeToken] += amount;\n\n    TokenTransfer._depositToken(pool.stakeToken, msg.sender, amount);\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, yieldAmount);\n\n    emit Stake(\n      poolId,\n      stakeId,\n      pool.timelock,\n      pool.yieldAPY,\n      pool.yieldToken,\n      pool.stakeToken,\n      amount\n    );\n  }\n\n  function extendsPosition(uint256 poolId, uint256 stakeId, uint256 extraDuration) external {\n    LockedPoolInfo memory pool = poolInfo[poolId];\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\n    _updateAccYield(pool.stakeToken);\n\n    StakingInfo storage staked = stakeInfo[poolId][stakeId];\n    if (staked.amount == 0) revert NoStaking();\n    if (staked.user != msg.sender) revert NotStaker(msg.sender);\n\n    uint256 yieldedAmnt = (staked.amount *\n      accYieldPerStaked[pool.stakeToken]) /\n      1e24 -\n      staked.yieldDebt;\n\n    staked.unlockTime += extraDuration;\n    if (staked.unlockTime - staked.stakeTime > (365 * 86400 * 10)) revert ExceededMaxDuration();\n\n    uint256 extraYield = (staked.amount * pool.yieldAPY * extraDuration) /\n      YIELD_DENOM /\n      365 /\n      86400;\n\n    staked.yieldAmount += extraYield;\n    staked.yieldDebt = (staked.amount * accYieldPerStaked[pool.stakeToken]) / 1e24 - yieldedAmnt;\n\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, extraYield);\n\n    emit Extend(\n      poolId,\n      stakeId,\n      extraDuration\n    );\n  }\n\n  /**\n   * @dev unstake postion when locked time is passed\n   *\n   * @param poolId poolId\n   * @param stakeId stake position id\n   */\n  function unstake(uint256 poolId, uint256 stakeId) external {\n    LockedPoolInfo memory pool = poolInfo[poolId];\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\n    _updateAccYield(pool.stakeToken);\n\n    StakingInfo memory staked = stakeInfo[poolId][stakeId];\n    if (staked.amount == 0) revert NoStaking();\n    if (staked.unlockTime > block.timestamp) revert Locked(staked.unlockTime);\n    if (staked.user != msg.sender) revert NotStaker(msg.sender);\n\n    poolInfo[poolId].totalStaked -= staked.amount;\n    tokenTotalStaked[pool.stakeToken] -= staked.amount;\n    _deleteStakingInfo(poolId, stakeId);\n\n    if (userStakeIds[poolId][msg.sender].length == 0) {\n      noUsersStaked[poolId] -= 1;\n    }\n\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, staked.amount);\n\n    emit Unstake(poolId, stakeId, pool.stakeToken, staked.amount);\n  }\n\n  /**\n   * @dev repay to unlock position prematurely by staking token\n   * the amount of token need to be repay will be:\n   *\n   * stakeInfo.yieldAmount - yieldGeneratedByStakePosition\n   *\n   * if repay using ETH, any spares amount will be returned to `msg.sender`\n   *\n   * @param poolId pool id\n   * @param stakeId position id\n   */\n  function repayWithStakeToken(\n    uint256 poolId,\n    uint256 stakeId\n  ) external payable override {\n    LockedPoolInfo memory pool = poolInfo[poolId];\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\n    StakingInfo memory staking = stakeInfo[poolId][stakeId];\n    if (staking.amount == 0) revert NoStaking();\n    _updateAccYield(pool.stakeToken);\n\n    uint256 yieldedAmnt = (staking.amount *\n      accYieldPerStaked[pool.stakeToken]) /\n      1e24 -\n      staking.yieldDebt;\n    uint256 requireAmnt = 0;\n    if (staking.yieldAmount > yieldedAmnt) {\n      requireAmnt = staking.yieldAmount - yieldedAmnt;\n    }\n\n    if (pool.stakeToken == address(0) && msg.value < requireAmnt)\n      revert InsufficientAmount(requireAmnt);\n    if (requireAmnt > staking.yieldAmount) requireAmnt = staking.yieldAmount;\n\n    poolInfo[poolId].totalStaked -= requireAmnt;\n    tokenTotalStaked[pool.stakeToken] -= requireAmnt;\n    if (userStakeIds[poolId][msg.sender].length == 0) {\n      noUsersStaked[poolId] -= 1;\n    }\n    _deleteStakingInfo(poolId, stakeId);\n\n    TokenTransfer._depositAndReturnSpare(\n      pool.stakeToken,\n      msg.sender,\n      treasury,\n      requireAmnt\n    );\n    // return stake\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, staking.amount);\n\n    emit Repay(poolId, stakeId, pool.stakeToken, staking.amount, requireAmnt);\n  }\n\n  /**\n   * @dev repay to unlock position prematurely by future yield token\n   * the amount of token need to be repay will be:\n   *\n   * stakeInfo.yieldAmount - yieldGeneratedByStakePosition\n   *\n   * @param poolId pool id\n   * @param stakeId position id\n   */\n  function repayWithYieldToken(\n    uint256 poolId,\n    uint256 stakeId\n  ) external override {\n    LockedPoolInfo memory pool = poolInfo[poolId];\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\n    StakingInfo memory staking = stakeInfo[poolId][stakeId];\n    if (staking.amount == 0) revert NoStaking();\n    if (staking.user != msg.sender) revert NotStaker(staking.user);\n    _updateAccYield(pool.stakeToken);\n\n    uint256 yieldedAmnt = (staking.amount *\n      accYieldPerStaked[pool.stakeToken]) /\n      1e24 -\n      staking.yieldDebt;\n    uint256 requireAmnt = 0;\n    if (staking.yieldAmount > yieldedAmnt) {\n      requireAmnt = staking.yieldAmount - yieldedAmnt;\n    }\n\n    poolInfo[poolId].totalStaked -= requireAmnt;\n    tokenTotalStaked[pool.stakeToken] -= requireAmnt;\n    if (userStakeIds[poolId][msg.sender].length == 0) {\n      noUsersStaked[poolId] -= 1;\n    }\n    _deleteStakingInfo(poolId, stakeId);\n\n    TokenTransfer._depositAndReturnSpare(\n      pool.yieldToken,\n      msg.sender,\n      treasury,\n      requireAmnt\n    );\n    // return stake\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, staking.amount);\n\n    emit Repay(poolId, stakeId, pool.stakeToken, staking.amount, requireAmnt);\n  }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}