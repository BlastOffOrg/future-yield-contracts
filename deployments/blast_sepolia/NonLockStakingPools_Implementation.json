{
  "address": "0xA173305c6278B8DD10634524aAF37B7D16DC8Fad",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidArguments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidTokenAmounts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStaking",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NotPoolAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolNotExisted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YIELD_DENOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "addSupportYieldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimNativeYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "claimPendingReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserStakePosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCalcTs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct INonLockStaking.StakePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "roleControl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "name": "setPoolYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yieldTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x110f15939b4f596711c92f83cd91a2695057a827c69e728603bece3859222a0b",
  "receipt": {
    "to": null,
    "from": "0x482bE3Ec3A24eE4FEc390576473dbc9DaD2E6d66",
    "contractAddress": "0xA173305c6278B8DD10634524aAF37B7D16DC8Fad",
    "transactionIndex": 8,
    "gasUsed": "2548610",
    "logsBloom": "0x
    "blockHash": "0xfd6d73d4720f5c7992ff2f1c1a84a924fe9d5cf59c01246cd74bf88eea4ed528",
    "transactionHash": "0x110f15939b4f596711c92f83cd91a2695057a827c69e728603bece3859222a0b",
    "logs": [],
    "blockNumber": 1725454,
    "cumulativeGasUsed": "3641440",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cae8cb29bcfa77b569b812f486e7b9c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotPoolAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolNotExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"addSupportYieldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNativeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claimPendingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCalcTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"internalType\":\"struct INonLockStaking.StakePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roleControl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"setPoolYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NonLockStakingPools.sol\":\"NonLockStakingPools\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/NonLockStakingPools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interface/IERC20Mintable.sol\\\";\\nimport \\\"./interface/INonLockStaking.sol\\\";\\nimport \\\"./interface/IRoleControl.sol\\\";\\nimport \\\"./interface/IBlast.sol\\\";\\nimport \\\"./lib/TokenTransfer.sol\\\";\\n\\ncontract NonLockStakingPools is Initializable, INonLockStaking {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant YIELD_DENOM = 100000;\\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256(\\\"POOL_ADMIN_ROLE\\\");\\n\\n  IRoleControl roleControl;\\n  address public treasury;\\n  uint256 nextPoolId;\\n  mapping(address => address) public yieldTokens;\\n  mapping(uint256 => PoolInfo) public poolInfo;\\n  mapping(uint256 => mapping(address => StakePosition)) userStakes;\\n  mapping(uint256 => address[]) listUsers;\\n\\n  function init(address roleControl_, address treasury_) external initializer {\\n    roleControl = IRoleControl(roleControl_);\\n    if (treasury_ != address(0)) {\\n      treasury = treasury_;\\n      IBlast(0x4300000000000000000000000000000000000002)\\n        .configureClaimableYield();\\n    }\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    if (!roleControl.hasRole(POOL_ADMIN_ROLE, msg.sender))\\n      revert NotPoolAdmin(msg.sender);\\n    _;\\n  }\\n\\n  function setTreasury(address _treasury) external onlyPoolAdmin {\\n    treasury = _treasury;\\n  }\\n\\n  function claimNativeYield() external onlyPoolAdmin {\\n    IBlast(0x4300000000000000000000000000000000000002).claimAllYield(\\n      address(this),\\n      treasury\\n    );\\n  }\\n\\n  function addSupportYieldTokens(\\n    address stakeToken,\\n    address yieldToken\\n  ) external onlyPoolAdmin {\\n    yieldTokens[stakeToken] = yieldToken;\\n  }\\n\\n  function addPool(\\n    uint256 yieldAPY,\\n    address stakeToken\\n  ) external onlyPoolAdmin returns (uint256 poolId) {\\n    if (yieldAPY == 0) revert InvalidArguments();\\n    address yieldToken = yieldTokens[stakeToken];\\n    if (yieldToken == address(0)) revert InvalidArguments();\\n\\n    poolId = nextPoolId;\\n    poolInfo[poolId] = PoolInfo(yieldAPY, yieldToken, stakeToken, 0, true);\\n\\n    nextPoolId = poolId + 1;\\n\\n    emit PoolCreated(poolId, yieldAPY, yieldToken, stakeToken);\\n  }\\n\\n  function closePool(uint256 poolId) external onlyPoolAdmin {\\n    poolInfo[poolId].enabled = false;\\n    poolInfo[poolId].yieldAPY = 0;\\n  }\\n\\n  function setPoolYield(uint256 poolId, uint256 yield) external onlyPoolAdmin {\\n    if (poolId == 0 || yield == 0) revert InvalidArguments();\\n    if (poolInfo[poolId].enabled == false) revert PoolNotExisted(poolId);\\n\\n    poolInfo[poolId].yieldAPY = yield;\\n  }\\n\\n  function getUserStakePosition(\\n    uint256 poolId,\\n    address account\\n  ) external view returns (StakePosition memory) {\\n    return userStakes[poolId][account];\\n  }\\n\\n  function stake(uint256 poolId, uint256 amount) external payable override {\\n    PoolInfo memory pool = poolInfo[poolId];\\n    if (pool.enabled == false) revert PoolNotExisted(poolId);\\n\\n    StakePosition storage position = userStakes[poolId][msg.sender];\\n\\n    if (position.amount == 0) {\\n      userStakes[poolId][msg.sender] = StakePosition(\\n        amount,\\n        block.timestamp,\\n        0\\n      );\\n    } else {\\n      uint256 accuReward = ((block.timestamp - position.lastCalcTs) *\\n        position.amount *\\n        pool.yieldAPY) /\\n        YIELD_DENOM /\\n        365 /\\n        86400;\\n\\n      position.lastCalcTs = block.timestamp;\\n      position.pendingReward += accuReward;\\n      position.amount += amount;\\n    }\\n\\n    poolInfo[poolId].totalStaked += amount;\\n\\n    TokenTransfer._depositToken(pool.stakeToken, address(this), amount);\\n\\n    emit Stake(poolId, pool.yieldAPY, pool.yieldToken, pool.stakeToken, amount);\\n  }\\n\\n  function unstake(uint256 poolId) external override {\\n    PoolInfo memory pool = poolInfo[poolId];\\n    // don't use enabled for user to unstake from close pool\\n    if (pool.yieldToken == address(0)) revert PoolNotExisted(poolId);\\n\\n    StakePosition memory position = userStakes[poolId][msg.sender];\\n    uint256 accuReward = ((block.timestamp - position.lastCalcTs) *\\n      position.amount *\\n      pool.yieldAPY) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    uint256 rewardAmount = accuReward + position.pendingReward;\\n    uint256 stakeAmount = position.amount;\\n    delete userStakes[poolId][msg.sender];\\n    poolInfo[poolId].totalStaked -= stakeAmount;\\n\\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, stakeAmount);\\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, rewardAmount);\\n    \\n    emit RewardClaim(poolId, pool.stakeToken, rewardAmount);\\n    emit Unstake(poolId, pool.stakeToken, position.amount, rewardAmount);\\n  }\\n\\n  function claimPendingReward(uint256 poolId) external override {\\n    PoolInfo memory pool = poolInfo[poolId];\\n    // don't use enabled for user to unstake from close pool\\n    if (pool.yieldToken == address(0)) revert PoolNotExisted(poolId);\\n\\n    StakePosition storage position = userStakes[poolId][msg.sender];\\n    if (position.amount == 0) revert NoStaking();\\n\\n    uint256 stakedAmount = position.amount;\\n    uint256 accuReward = ((block.timestamp - position.lastCalcTs) *\\n      stakedAmount *\\n      pool.yieldAPY) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    uint256 rewardAmount = accuReward + position.pendingReward;\\n    position.pendingReward = 0;\\n    position.lastCalcTs = block.timestamp;\\n\\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, rewardAmount);\\n    \\n    emit RewardClaim(poolId, pool.stakeToken, rewardAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x65b7b615caa7748d50ae2ed5097c6e9e88d51f9e3099da178d619a7c227506bf\",\"license\":\"MIT\"},\"contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE \\n}\\n\\ninterface IBlast{\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\",\"keccak256\":\"0xb94a575fdf3be5029b157f43ffe585167d2d911777e6af156ef17b8441275d2f\",\"license\":\"MIT\"},\"contracts/interface/IERC20Mintable.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n  function mint(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x201e45d0d2667fbafebc8f21057ce9e708056f2cda3011a567b5c0b9d3553124\",\"license\":\"MIT\"},\"contracts/interface/INonLockStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface INonLockStaking {\\n  error NotPoolAdmin(address user);\\n  error InvalidArguments();\\n  error PoolClosed(uint256 id);\\n  error PoolNotExisted(uint256 id);\\n  error NoStaking();\\n\\n  struct StakePosition {\\n    uint256 amount;\\n    uint256 lastCalcTs; // last reward calculated timestamp\\n    uint256 pendingReward;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 yieldAPY;\\n    address yieldToken;\\n    address stakeToken;\\n    uint256 totalStaked;\\n    bool enabled;\\n  }\\n\\n  event PoolCreated(\\n    uint256 id,\\n    uint256 yieldAPY,\\n    address yieldToken,\\n    address stakeToken\\n  );\\n\\n  event Stake(\\n    uint256 poolId,\\n    uint256 yield,\\n    address yieldToken,\\n    address stakeToken,\\n    uint256 amount\\n  );\\n\\n  event Unstake(\\n    uint256 poolId,\\n    address stakeToken,\\n    uint256 totalAmount,\\n    uint256 rewardAmount\\n  );\\n\\n  event RewardClaim(\\n    uint256 poolId,\\n    address stakeToken,\\n    uint256 rewardAmount\\n  );\\n\\n  function stake(uint256 poolId, uint256 amount) external payable;\\n\\n  function unstake(uint256 poolId) external;\\n\\n  function claimPendingReward(uint256 poolId) external;\\n}\\n\",\"keccak256\":\"0x13dbe8ab75869d76b0164b16e8975a13fe1017e8c3040edd83abf404b7a81935\",\"license\":\"MIT\"},\"contracts/interface/IRoleControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IRoleControl is IAccessControl {\\n  \\n}\\n\",\"keccak256\":\"0x96b1f3c3213c5364a4f2a8a86ef2b582250684eb790964bc6ac7d776e5310ab1\",\"license\":\"MIT\"},\"contracts/lib/TokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/IERC20Mintable.sol\\\";\\n\\nlibrary TokenTransfer {\\n  using SafeERC20 for IERC20;\\n  error InvalidTokenAmounts(uint256 amount);\\n\\n  function _depositToken(address token, address from, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount != msg.value) revert InvalidTokenAmounts(amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, address(this), amount);\\n    }\\n  }\\n\\n  function _depositAndReturnSpare(address token, address from, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount > msg.value) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n      payable(from).transfer(msg.value - amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n  }\\n\\n  function _transferToken(address token, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (address(this).balance < amount) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n    } else {\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n  }\\n\\n  function _mintToken(address token, address to, uint256 amount) internal {\\n    IERC20Mintable(token).mint(to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x5793004c88278f9dbf3c5545caf7694fab2ef5398043bd1037c485241f26e961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d4f806100206000396000f3fe6080604052600436106100f35760003560e01c806385036b6c1161008a578063c6cf7c5f11610059578063c6cf7c5f14610309578063d225481314610346578063f09a401614610371578063f0f442601461039a576100f3565b806385036b6c1461024f57806394caca161461028c5780639a45228f146102b5578063b8f6dba7146102de576100f3565b806337de615f116100c657806337de615f146101b65780633959aaef146101df57806361d027b3146102085780637b0472f014610233576100f3565b80630f5baf61146100f85780631526fe271461010f5780632e17de781461015057806333ba888214610179575b600080fd5b34801561010457600080fd5b5061010d6103c3565b005b34801561011b57600080fd5b5061013660048036038101906101319190612306565b610579565b60405161014795949392919061239e565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190612306565b6105fc565b005b34801561018557600080fd5b506101a0600480360381019061019b919061241d565b6109a5565b6040516101ad919061245d565b60405180910390f35b3480156101c257600080fd5b506101dd60048036038101906101d89190612306565b610d34565b005b3480156101eb57600080fd5b5061020660048036038101906102019190612306565b610e81565b005b34801561021457600080fd5b5061021d611162565b60405161022a9190612478565b60405180910390f35b61024d60048036038101906102489190612493565b611188565b005b34801561025b57600080fd5b506102766004803603810190610271919061241d565b6114ed565b6040516102839190612524565b60405180910390f35b34801561029857600080fd5b506102b360048036038101906102ae919061253f565b611576565b005b3480156102c157600080fd5b506102dc60048036038101906102d79190612493565b6116f7565b005b3480156102ea57600080fd5b506102f36118c7565b6040516103009190612598565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b91906125b3565b6118eb565b60405161033d9190612478565b60405180910390f35b34801561035257600080fd5b5061035b61191e565b604051610368919061245d565b60405180910390f35b34801561037d57600080fd5b506103986004803603810190610393919061253f565b611925565b005b3480156103a657600080fd5b506103c160048036038101906103bc91906125b3565b611b88565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016104409291906125e0565b602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190612635565b6104c257336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016104b99190612478565b60405180910390fd5b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663860043b630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610533929190612662565b6020604051808303816000875af1158015610552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057691906126a0565b50565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff160361076e57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610765919061245d565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006201518061016d620186a08560000151856000015186602001514261081291906126fc565b61081c9190612730565b6108269190612730565b61083091906127a1565b61083a91906127a1565b61084491906127a1565b9050600082604001518261085891906127d2565b90506000836000015190506005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090555050806004600088815260200190815260200160002060030160008282546108f491906126fc565b9250508190555061090a85604001513383611ccb565b61091985602001513384611dc1565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f38686604001518460405161095093929190612806565b60405180910390a17fc1e00202ee2c06861d326fc6374026b751863ff64218ccbaa38c3e603a8e72c2868660400151866000015185604051610995949392919061283d565b60405180910390a1505050505050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610a239291906125e0565b602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190612635565b610aa557336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610a9c9190612478565b60405180910390fd5b60008303610adf576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ba9576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025491506040518060a001604052808581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160011515815250600460008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600182610cea91906127d2565b6002819055507fdf8d6ed0cc461638776b3ca70e85e07a489b1843721ce48af5e1edd7ceadd5fe82858386604051610d259493929190612882565b60405180910390a15092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610db19291906125e0565b602060405180830381865afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190612635565b610e3357336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610e2a9190612478565b60405180910390fd5b60006004600083815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600460008381526020019081526020016000206000018190555050565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610ff357816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610fea919061245d565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403611085576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160000154905060006201518061016d620186a08660000151858760010154426110b191906126fc565b6110bb9190612730565b6110c59190612730565b6110cf91906127a1565b6110d991906127a1565b6110e391906127a1565b905060008360020154826110f791906127d2565b90506000846002018190555042846001018190555061111b85602001513383611dc1565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f38686604001518360405161115293929190612806565b60405180910390a1505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000151581608001511515036112d257826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016112c9919061245d565b60405180910390fd5b60006005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154036113c457604051806060016040528084815260200142815260200160008152506005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050611460565b60006201518061016d620186a0856000015185600001548660010154426113eb91906126fc565b6113f59190612730565b6113ff9190612730565b61140991906127a1565b61141391906127a1565b61141d91906127a1565b90504282600101819055508082600201600082825461143c91906127d2565b925050819055508382600001600082825461145791906127d2565b92505081905550505b8260046000868152602001908152602001600020600301600082825461148691906127d2565b9250508190555061149c82604001513085611e33565b7f8cbcc18badd6d14ded750186c5461cc995c9b0311cf89a7d0c4f40f9e9a5f75784836000015184602001518560400151876040516114df9594939291906128c7565b60405180910390a150505050565b6114f56122aa565b6005600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016115f39291906125e0565b602060405180830381865afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116349190612635565b61167557336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161166c9190612478565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016117749291906125e0565b602060405180830381865afa158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b59190612635565b6117f657336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016117ed9190612478565b60405180910390fd5b60008214806118055750600081145b1561183c576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600015156004600084815260200190815260200160002060040160009054906101000a900460ff161515036118a857816040517feb0d37cc00000000000000000000000000000000000000000000000000000000815260040161189f919061245d565b60405180910390fd5b8060046000848152602001908152602001600020600001819055505050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620186a081565b60008060019054906101000a900460ff161590508080156119565750600160008054906101000a900460ff1660ff16105b80611983575061196530611ee3565b1580156119825750600160008054906101000a900460ff1660ff16145b5b6119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b99061299d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156119ff576001600060016101000a81548160ff0219169083151502179055505b82600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611b2a5781600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b1157600080fd5b505af1158015611b25573d6000803e3d6000fd5b505050505b8015611b835760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b7a9190612a0f565b60405180910390a15b505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611c059291906125e0565b602060405180830381865afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c469190612635565b611c8757336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611c7e9190612478565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d905780471015611d4457806040517f83b9f0ae000000000000000000000000000000000000000000000000000000008152600401611d3b919061245d565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611d8a573d6000803e3d6000fd5b50611dbc565b611dbb82828573ffffffffffffffffffffffffffffffffffffffff16611f069092919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401611dfc929190612a2a565b600060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611eb057348114611eab57806040517f83b9f0ae000000000000000000000000000000000000000000000000000000008152600401611ea2919061245d565b60405180910390fd5b611ede565b611edd8230838673ffffffffffffffffffffffffffffffffffffffff16611f8c909392919063ffffffff16565b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611f878363a9059cbb60e01b8484604051602401611f25929190612a2a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612015565b505050565b61200f846323b872dd60e01b858585604051602401611fad93929190612a53565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612015565b50505050565b6000612077826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166120dd9092919063ffffffff16565b90506000815114806120995750808060200190518101906120989190612635565b5b6120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90612afc565b60405180910390fd5b505050565b60606120ec84846000856120f5565b90509392505050565b60608247101561213a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213190612b8e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516121639190612c1f565b60006040518083038185875af1925050503d80600081146121a0576040519150601f19603f3d011682016040523d82523d6000602084013e6121a5565b606091505b50915091506121b6878383876121c2565b92505050949350505050565b6060831561222457600083510361221c576121dc85612237565b61221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290612c82565b60405180910390fd5b5b82905061222f565b61222e838361225a565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561226d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a19190612cf7565b60405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6122e3816122d0565b81146122ee57600080fd5b50565b600081359050612300816122da565b92915050565b60006020828403121561231c5761231b6122cb565b5b600061232a848285016122f1565b91505092915050565b61233c816122d0565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061236d82612342565b9050919050565b61237d81612362565b82525050565b60008115159050919050565b61239881612383565b82525050565b600060a0820190506123b36000830188612333565b6123c06020830187612374565b6123cd6040830186612374565b6123da6060830185612333565b6123e7608083018461238f565b9695505050505050565b6123fa81612362565b811461240557600080fd5b50565b600081359050612417816123f1565b92915050565b60008060408385031215612434576124336122cb565b5b6000612442858286016122f1565b925050602061245385828601612408565b9150509250929050565b60006020820190506124726000830184612333565b92915050565b600060208201905061248d6000830184612374565b92915050565b600080604083850312156124aa576124a96122cb565b5b60006124b8858286016122f1565b92505060206124c9858286016122f1565b9150509250929050565b6124dc816122d0565b82525050565b6060820160008201516124f860008501826124d3565b50602082015161250b60208501826124d3565b50604082015161251e60408501826124d3565b50505050565b600060608201905061253960008301846124e2565b92915050565b60008060408385031215612556576125556122cb565b5b600061256485828601612408565b925050602061257585828601612408565b9150509250929050565b6000819050919050565b6125928161257f565b82525050565b60006020820190506125ad6000830184612589565b92915050565b6000602082840312156125c9576125c86122cb565b5b60006125d784828501612408565b91505092915050565b60006040820190506125f56000830185612589565b6126026020830184612374565b9392505050565b61261281612383565b811461261d57600080fd5b50565b60008151905061262f81612609565b92915050565b60006020828403121561264b5761264a6122cb565b5b600061265984828501612620565b91505092915050565b60006040820190506126776000830185612374565b6126846020830184612374565b9392505050565b60008151905061269a816122da565b92915050565b6000602082840312156126b6576126b56122cb565b5b60006126c48482850161268b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612707826122d0565b9150612712836122d0565b925082820390508181111561272a576127296126cd565b5b92915050565b600061273b826122d0565b9150612746836122d0565b9250828202612754816122d0565b9150828204841483151761276b5761276a6126cd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006127ac826122d0565b91506127b7836122d0565b9250826127c7576127c6612772565b5b828204905092915050565b60006127dd826122d0565b91506127e8836122d0565b9250828201905080821115612800576127ff6126cd565b5b92915050565b600060608201905061281b6000830186612333565b6128286020830185612374565b6128356040830184612333565b949350505050565b60006080820190506128526000830187612333565b61285f6020830186612374565b61286c6040830185612333565b6128796060830184612333565b95945050505050565b60006080820190506128976000830187612333565b6128a46020830186612333565b6128b16040830185612374565b6128be6060830184612374565b95945050505050565b600060a0820190506128dc6000830188612333565b6128e96020830187612333565b6128f66040830186612374565b6129036060830185612374565b6129106080830184612333565b9695505050505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612987602e8361291a565b91506129928261292b565b604082019050919050565b600060208201905081810360008301526129b68161297a565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006129f96129f46129ef846129bd565b6129d4565b6129c7565b9050919050565b612a09816129de565b82525050565b6000602082019050612a246000830184612a00565b92915050565b6000604082019050612a3f6000830185612374565b612a4c6020830184612333565b9392505050565b6000606082019050612a686000830186612374565b612a756020830185612374565b612a826040830184612333565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612ae6602a8361291a565b9150612af182612a8a565b604082019050919050565b60006020820190508181036000830152612b1581612ad9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612b7860268361291a565b9150612b8382612b1c565b604082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612be2578082015181840152602081019050612bc7565b60008484015250505050565b6000612bf982612bae565b612c038185612bb9565b9350612c13818560208601612bc4565b80840191505092915050565b6000612c2b8284612bee565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c6c601d8361291a565b9150612c7782612c36565b602082019050919050565b60006020820190508181036000830152612c9b81612c5f565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612cc982612ca2565b612cd3818561291a565b9350612ce3818560208601612bc4565b612cec81612cad565b840191505092915050565b60006020820190508181036000830152612d118184612cbe565b90509291505056fea26469706673582212200abc5ed7e22cb90f679bf6b76d15b9e342723510160a4f822ff7afdfa512c62c64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806385036b6c1161008a578063c6cf7c5f11610059578063c6cf7c5f14610309578063d225481314610346578063f09a401614610371578063f0f442601461039a576100f3565b806385036b6c1461024f57806394caca161461028c5780639a45228f146102b5578063b8f6dba7146102de576100f3565b806337de615f116100c657806337de615f146101b65780633959aaef146101df57806361d027b3146102085780637b0472f014610233576100f3565b80630f5baf61146100f85780631526fe271461010f5780632e17de781461015057806333ba888214610179575b600080fd5b34801561010457600080fd5b5061010d6103c3565b005b34801561011b57600080fd5b5061013660048036038101906101319190612306565b610579565b60405161014795949392919061239e565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190612306565b6105fc565b005b34801561018557600080fd5b506101a0600480360381019061019b919061241d565b6109a5565b6040516101ad919061245d565b60405180910390f35b3480156101c257600080fd5b506101dd60048036038101906101d89190612306565b610d34565b005b3480156101eb57600080fd5b5061020660048036038101906102019190612306565b610e81565b005b34801561021457600080fd5b5061021d611162565b60405161022a9190612478565b60405180910390f35b61024d60048036038101906102489190612493565b611188565b005b34801561025b57600080fd5b506102766004803603810190610271919061241d565b6114ed565b6040516102839190612524565b60405180910390f35b34801561029857600080fd5b506102b360048036038101906102ae919061253f565b611576565b005b3480156102c157600080fd5b506102dc60048036038101906102d79190612493565b6116f7565b005b3480156102ea57600080fd5b506102f36118c7565b6040516103009190612598565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b91906125b3565b6118eb565b60405161033d9190612478565b60405180910390f35b34801561035257600080fd5b5061035b61191e565b604051610368919061245d565b60405180910390f35b34801561037d57600080fd5b506103986004803603810190610393919061253f565b611925565b005b3480156103a657600080fd5b506103c160048036038101906103bc91906125b3565b611b88565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016104409291906125e0565b602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190612635565b6104c257336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016104b99190612478565b60405180910390fd5b73430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663860043b630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610533929190612662565b6020604051808303816000875af1158015610552573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057691906126a0565b50565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff160361076e57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610765919061245d565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006201518061016d620186a08560000151856000015186602001514261081291906126fc565b61081c9190612730565b6108269190612730565b61083091906127a1565b61083a91906127a1565b61084491906127a1565b9050600082604001518261085891906127d2565b90506000836000015190506005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090555050806004600088815260200190815260200160002060030160008282546108f491906126fc565b9250508190555061090a85604001513383611ccb565b61091985602001513384611dc1565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f38686604001518460405161095093929190612806565b60405180910390a17fc1e00202ee2c06861d326fc6374026b751863ff64218ccbaa38c3e603a8e72c2868660400151866000015185604051610995949392919061283d565b60405180910390a1505050505050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610a239291906125e0565b602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190612635565b610aa557336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610a9c9190612478565b60405180910390fd5b60008303610adf576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ba9576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025491506040518060a001604052808581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160011515815250600460008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600182610cea91906127d2565b6002819055507fdf8d6ed0cc461638776b3ca70e85e07a489b1843721ce48af5e1edd7ceadd5fe82858386604051610d259493929190612882565b60405180910390a15092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610db19291906125e0565b602060405180830381865afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190612635565b610e3357336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610e2a9190612478565b60405180910390fd5b60006004600083815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600460008381526020019081526020016000206000018190555050565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610ff357816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610fea919061245d565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403611085576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160000154905060006201518061016d620186a08660000151858760010154426110b191906126fc565b6110bb9190612730565b6110c59190612730565b6110cf91906127a1565b6110d991906127a1565b6110e391906127a1565b905060008360020154826110f791906127d2565b90506000846002018190555042846001018190555061111b85602001513383611dc1565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f38686604001518360405161115293929190612806565b60405180910390a1505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000151581608001511515036112d257826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016112c9919061245d565b60405180910390fd5b60006005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154036113c457604051806060016040528084815260200142815260200160008152506005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050611460565b60006201518061016d620186a0856000015185600001548660010154426113eb91906126fc565b6113f59190612730565b6113ff9190612730565b61140991906127a1565b61141391906127a1565b61141d91906127a1565b90504282600101819055508082600201600082825461143c91906127d2565b925050819055508382600001600082825461145791906127d2565b92505081905550505b8260046000868152602001908152602001600020600301600082825461148691906127d2565b9250508190555061149c82604001513085611e33565b7f8cbcc18badd6d14ded750186c5461cc995c9b0311cf89a7d0c4f40f9e9a5f75784836000015184602001518560400151876040516114df9594939291906128c7565b60405180910390a150505050565b6114f56122aa565b6005600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016115f39291906125e0565b602060405180830381865afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116349190612635565b61167557336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161166c9190612478565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016117749291906125e0565b602060405180830381865afa158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b59190612635565b6117f657336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016117ed9190612478565b60405180910390fd5b60008214806118055750600081145b1561183c576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600015156004600084815260200190815260200160002060040160009054906101000a900460ff161515036118a857816040517feb0d37cc00000000000000000000000000000000000000000000000000000000815260040161189f919061245d565b60405180910390fd5b8060046000848152602001908152602001600020600001819055505050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620186a081565b60008060019054906101000a900460ff161590508080156119565750600160008054906101000a900460ff1660ff16105b80611983575061196530611ee3565b1580156119825750600160008054906101000a900460ff1660ff16145b5b6119c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b99061299d565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156119ff576001600060016101000a81548160ff0219169083151502179055505b82600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611b2a5781600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073430000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611b1157600080fd5b505af1158015611b25573d6000803e3d6000fd5b505050505b8015611b835760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b7a9190612a0f565b60405180910390a15b505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611c059291906125e0565b602060405180830381865afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c469190612635565b611c8757336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611c7e9190612478565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d905780471015611d4457806040517f83b9f0ae000000000000000000000000000000000000000000000000000000008152600401611d3b919061245d565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611d8a573d6000803e3d6000fd5b50611dbc565b611dbb82828573ffffffffffffffffffffffffffffffffffffffff16611f069092919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401611dfc929190612a2a565b600060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611eb057348114611eab57806040517f83b9f0ae000000000000000000000000000000000000000000000000000000008152600401611ea2919061245d565b60405180910390fd5b611ede565b611edd8230838673ffffffffffffffffffffffffffffffffffffffff16611f8c909392919063ffffffff16565b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b611f878363a9059cbb60e01b8484604051602401611f25929190612a2a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612015565b505050565b61200f846323b872dd60e01b858585604051602401611fad93929190612a53565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612015565b50505050565b6000612077826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166120dd9092919063ffffffff16565b90506000815114806120995750808060200190518101906120989190612635565b5b6120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90612afc565b60405180910390fd5b505050565b60606120ec84846000856120f5565b90509392505050565b60608247101561213a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213190612b8e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516121639190612c1f565b60006040518083038185875af1925050503d80600081146121a0576040519150601f19603f3d011682016040523d82523d6000602084013e6121a5565b606091505b50915091506121b6878383876121c2565b92505050949350505050565b6060831561222457600083510361221c576121dc85612237565b61221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290612c82565b60405180910390fd5b5b82905061222f565b61222e838361225a565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561226d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a19190612cf7565b60405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6122e3816122d0565b81146122ee57600080fd5b50565b600081359050612300816122da565b92915050565b60006020828403121561231c5761231b6122cb565b5b600061232a848285016122f1565b91505092915050565b61233c816122d0565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061236d82612342565b9050919050565b61237d81612362565b82525050565b60008115159050919050565b61239881612383565b82525050565b600060a0820190506123b36000830188612333565b6123c06020830187612374565b6123cd6040830186612374565b6123da6060830185612333565b6123e7608083018461238f565b9695505050505050565b6123fa81612362565b811461240557600080fd5b50565b600081359050612417816123f1565b92915050565b60008060408385031215612434576124336122cb565b5b6000612442858286016122f1565b925050602061245385828601612408565b9150509250929050565b60006020820190506124726000830184612333565b92915050565b600060208201905061248d6000830184612374565b92915050565b600080604083850312156124aa576124a96122cb565b5b60006124b8858286016122f1565b92505060206124c9858286016122f1565b9150509250929050565b6124dc816122d0565b82525050565b6060820160008201516124f860008501826124d3565b50602082015161250b60208501826124d3565b50604082015161251e60408501826124d3565b50505050565b600060608201905061253960008301846124e2565b92915050565b60008060408385031215612556576125556122cb565b5b600061256485828601612408565b925050602061257585828601612408565b9150509250929050565b6000819050919050565b6125928161257f565b82525050565b60006020820190506125ad6000830184612589565b92915050565b6000602082840312156125c9576125c86122cb565b5b60006125d784828501612408565b91505092915050565b60006040820190506125f56000830185612589565b6126026020830184612374565b9392505050565b61261281612383565b811461261d57600080fd5b50565b60008151905061262f81612609565b92915050565b60006020828403121561264b5761264a6122cb565b5b600061265984828501612620565b91505092915050565b60006040820190506126776000830185612374565b6126846020830184612374565b9392505050565b60008151905061269a816122da565b92915050565b6000602082840312156126b6576126b56122cb565b5b60006126c48482850161268b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612707826122d0565b9150612712836122d0565b925082820390508181111561272a576127296126cd565b5b92915050565b600061273b826122d0565b9150612746836122d0565b9250828202612754816122d0565b9150828204841483151761276b5761276a6126cd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006127ac826122d0565b91506127b7836122d0565b9250826127c7576127c6612772565b5b828204905092915050565b60006127dd826122d0565b91506127e8836122d0565b9250828201905080821115612800576127ff6126cd565b5b92915050565b600060608201905061281b6000830186612333565b6128286020830185612374565b6128356040830184612333565b949350505050565b60006080820190506128526000830187612333565b61285f6020830186612374565b61286c6040830185612333565b6128796060830184612333565b95945050505050565b60006080820190506128976000830187612333565b6128a46020830186612333565b6128b16040830185612374565b6128be6060830184612374565b95945050505050565b600060a0820190506128dc6000830188612333565b6128e96020830187612333565b6128f66040830186612374565b6129036060830185612374565b6129106080830184612333565b9695505050505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612987602e8361291a565b91506129928261292b565b604082019050919050565b600060208201905081810360008301526129b68161297a565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006129f96129f46129ef846129bd565b6129d4565b6129c7565b9050919050565b612a09816129de565b82525050565b6000602082019050612a246000830184612a00565b92915050565b6000604082019050612a3f6000830185612374565b612a4c6020830184612333565b9392505050565b6000606082019050612a686000830186612374565b612a756020830185612374565b612a826040830184612333565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612ae6602a8361291a565b9150612af182612a8a565b604082019050919050565b60006020820190508181036000830152612b1581612ad9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612b7860268361291a565b9150612b8382612b1c565b604082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612be2578082015181840152602081019050612bc7565b60008484015250505050565b6000612bf982612bae565b612c038185612bb9565b9350612c13818560208601612bc4565b80840191505092915050565b6000612c2b8284612bee565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c6c601d8361291a565b9150612c7782612c36565b602082019050919050565b60006020820190508181036000830152612c9b81612c5f565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612cc982612ca2565b612cd3818561291a565b9350612ce3818560208601612bc4565b612cec81612cad565b840191505092915050565b60006020820190508181036000830152612d118184612cbe565b90509291505056fea26469706673582212200abc5ed7e22cb90f679bf6b76d15b9e342723510160a4f822ff7afdfa512c62c64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 720,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 723,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8093,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "roleControl",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IRoleControl)10073"
      },
      {
        "astId": 8095,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8097,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "nextPoolId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8101,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "yieldTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8106,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)10009_storage)"
      },
      {
        "astId": 8113,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "userStakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakePosition)9998_storage))"
      },
      {
        "astId": 8118,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "listUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoleControl)10073": {
        "encoding": "inplace",
        "label": "contract IRoleControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(StakePosition)9998_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INonLockStaking.StakePosition)",
        "numberOfBytes": "32",
        "value": "t_struct(StakePosition)9998_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakePosition)9998_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct INonLockStaking.StakePosition))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StakePosition)9998_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)10009_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct INonLockStaking.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)10009_storage"
      },
      "t_struct(PoolInfo)10009_storage": {
        "encoding": "inplace",
        "label": "struct INonLockStaking.PoolInfo",
        "members": [
          {
            "astId": 10000,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "yieldAPY",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10002,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "yieldToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10004,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "stakeToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10006,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "totalStaked",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10008,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "enabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakePosition)9998_storage": {
        "encoding": "inplace",
        "label": "struct INonLockStaking.StakePosition",
        "members": [
          {
            "astId": 9993,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9995,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "lastCalcTs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9997,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "pendingReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}