{
  "address": "0xe95F660359DE946231305351FBECa7fAEc4bA4f4",
  "abi": [
    {
      "inputs": [],
      "name": "ExceededMaxDuration",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArguments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidTokenAmounts",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStaking",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NotPoolAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NotStaker",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolNotExisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyStake",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "Extend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDB",
      "outputs": [
        {
          "internalType": "contract IERC20Rebasing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YIELD_DENOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accYieldPerStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "addLockedPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "addSupportYieldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blast",
      "outputs": [
        {
          "internalType": "contract IBlast",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimNativeYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUSDBYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extraDuration",
          "type": "uint256"
        }
      ],
      "name": "extendsPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "getGeneratedYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yieldDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILockedStaking.StakingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserStakeIdByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserStakesIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "roleControl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "noUsersStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextStakeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "repayWithStakeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "repayWithYieldToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blast",
          "type": "address"
        }
      ],
      "name": "setBlast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "name": "setPoolYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdb",
          "type": "address"
        }
      ],
      "name": "setUSDBRebasing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakeTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yieldTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x467d2d65fbd69282cc001498e5d13b15f977ca3a40777453c8fb80483a9b72fe",
  "receipt": {
    "to": null,
    "from": "0xE8D35bFb4263B46F0bf308a654e4A8Eb9F9CDAA5",
    "contractAddress": "0xe95F660359DE946231305351FBECa7fAEc4bA4f4",
    "transactionIndex": 1,
    "gasUsed": "4950474",
    "logsBloom": "0x
    "blockHash": "0xdb140b53b61bd56c08a1d9ed972732b06fe80aee37c327c0753f7bf3bc3789b7",
    "transactionHash": "0x467d2d65fbd69282cc001498e5d13b15f977ca3a40777453c8fb80483a9b72fe",
    "logs": [],
    "blockNumber": 162098,
    "cumulativeGasUsed": "4997431",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a7fa4219f9bc559afed37a62814d21cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExceededMaxDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenAmounts\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotPoolAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotStaker\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolNotExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyStake\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDB\",\"outputs\":[{\"internalType\":\"contract IERC20Rebasing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accYieldPerStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"addLockedPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"addSupportYieldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blast\",\"outputs\":[{\"internalType\":\"contract IBlast\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNativeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUSDBYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraDuration\",\"type\":\"uint256\"}],\"name\":\"extendsPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getGeneratedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct ILockedStaking.StakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserStakeIdByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakesIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roleControl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"noUsersStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStakeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"repayWithStakeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"repayWithYieldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blast\",\"type\":\"address\"}],\"name\":\"setBlast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"setPoolYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdb\",\"type\":\"address\"}],\"name\":\"setUSDBRebasing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Lock staking pool contract\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addLockedPools(uint256,uint256,address)\":{\"details\":\"Admin only - add new staking pool\",\"params\":{\"stakeToken\":\"token address use for staking\",\"timelock\":\"staking lock time in seconds\",\"yieldAPY\":\"yieldAPY\"}},\"addSupportYieldTokens(address,address)\":{\"details\":\"Admin only - add stake and future yield token pair\",\"params\":{\"stakeToken\":\"address of token used to stake, `address(0)` for ETH\",\"yieldToken\":\"address of fyETH or fyUSDB token\"}},\"closePool(uint256)\":{\"details\":\"Admin only - close staking pools Closed pool will not accept new staking\",\"params\":{\"poolId\":\"poolId\"}},\"getGeneratedYield(uint256,uint256)\":{\"details\":\"get amount of yield token generated by staking position\",\"params\":{\"poolId\":\"poolId\",\"stakeId\":\"staking Id\"}},\"getStakeInfo(uint256,uint256)\":{\"details\":\"get staking position info\",\"params\":{\"poolId\":\"poolId\",\"stakeId\":\"stakeId\"}},\"getUserStakesIds(uint256,address)\":{\"details\":\"get user stake ids \",\"params\":{\"account\":\"account address\",\"poolId\":\"poolId\"}},\"repayWithStakeToken(uint256,uint256)\":{\"details\":\"repay to unlock position prematurely by staking token the amount of token need to be repay will be: stakeInfo.yieldAmount - yieldGeneratedByStakePosition if repay using ETH, any spares amount will be returned to `msg.sender`\",\"params\":{\"poolId\":\"pool id\",\"stakeId\":\"position id\"}},\"repayWithYieldToken(uint256,uint256)\":{\"details\":\"repay to unlock position prematurely by future yield token the amount of token need to be repay will be: stakeInfo.yieldAmount - yieldGeneratedByStakePosition\",\"params\":{\"poolId\":\"pool id\",\"stakeId\":\"position id\"}},\"setBlast(address)\":{\"params\":{\"_blast\":\"blast address\"}},\"setPoolYield(uint256,uint256)\":{\"details\":\"Admin only - set pool yield APY\",\"params\":{\"poolId\":\"poolId\",\"yield\":\"yieldAPY\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"treasury wallet address\"}},\"setUSDBRebasing(address)\":{\"params\":{\"usdb\":\"USDB token address\"}},\"stake(uint256,uint256)\":{\"details\":\"stake token into an pool with `poolId`\",\"params\":{\"amount\":\"staking amount\",\"poolId\":\"poolId\"}},\"stakeTimes(uint256,address)\":{\"details\":\"get number of staking times of an account in a pool\",\"params\":{\"account\":\"account address\",\"poolId\":\"poolId\"}},\"unstake(uint256,uint256)\":{\"details\":\"unstake postion when locked time is passed\",\"params\":{\"poolId\":\"poolId\",\"stakeId\":\"stake position id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimNativeYield()\":{\"notice\":\"Admin claims native yield and send to treasury address\"},\"claimUSDBYield()\":{\"notice\":\"Admin claims native USDB yield and send to treasury address\"},\"setBlast(address)\":{\"notice\":\"set native blast contract\"},\"setPoolYield(uint256,uint256)\":{\"notice\":\"do not change pool APY after user start staking in the pool\"},\"setTreasury(address)\":{\"notice\":\"set treasury address Treasury is the wallet used to receive all native yield\"},\"setUSDBRebasing(address)\":{\"notice\":\"set USDB token address\"},\"stake(uint256,uint256)\":{\"notice\":\"if staking ETH, amount of wei send to contract must be equal to `amount` param\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockedStakingPools.sol\":\"LockedStakingPools\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/LockedStakingPools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interface/IRoleControl.sol\\\";\\nimport \\\"./interface/ILockedStaking.sol\\\";\\nimport \\\"./interface/IBlast.sol\\\";\\nimport \\\"./interface/IERC20Rebasing.sol\\\";\\nimport \\\"./lib/TokenTransfer.sol\\\";\\n\\n/**\\n * @dev Lock staking pool contract\\n *\\n */\\ncontract LockedStakingPools is Initializable, ILockedStaking {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant YIELD_DENOM = 100000;\\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256(\\\"POOL_ADMIN_ROLE\\\");\\n\\n  IERC20Rebasing public USDB;\\n  IBlast public blast;\\n\\n  IRoleControl roleControl;\\n  address public treasury;\\n  uint256 nextPoolId;\\n  mapping(uint256 => LockedPoolInfo) public poolInfo;\\n  mapping(uint256 => mapping(uint256 => StakingInfo)) stakeInfo;\\n  mapping(uint256 => mapping(address => uint256[])) userStakeIds;\\n  mapping(uint256 => uint256) public noUsersStaked;\\n  mapping(address => address) public yieldTokens;\\n  mapping(address => uint256) public tokenTotalStaked;\\n  mapping(address => uint256) public accYieldPerStaked;\\n\\n  function init(address roleControl_, address treasury_) external initializer {\\n    roleControl = IRoleControl(roleControl_);\\n    treasury = treasury_;\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    if (!roleControl.hasRole(POOL_ADMIN_ROLE, msg.sender))\\n      revert NotPoolAdmin(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * set USDB token address\\n   *\\n   * @param usdb USDB token address\\n   */\\n  function setUSDBRebasing(address usdb) external onlyPoolAdmin {\\n    USDB = IERC20Rebasing(usdb);\\n    USDB.configure(RebaseYieldMode.CLAIMABLE);\\n  }\\n\\n  /**\\n   * set native blast contract\\n   *\\n   * @param _blast blast address\\n   */\\n  function setBlast(address _blast) external onlyPoolAdmin {\\n    blast = IBlast(_blast);\\n    blast.configureClaimableYield();\\n  }\\n\\n  /**\\n   *\\n   * set treasury address\\n   * Treasury is the wallet used to receive all native yield\\n   *\\n   * @param _treasury treasury wallet address\\n   */\\n  function setTreasury(address _treasury) external onlyPoolAdmin {\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n   * Admin claims native yield and send to treasury address\\n   */\\n  function claimNativeYield() external onlyPoolAdmin {\\n    blast.claimAllYield(address(this), treasury);\\n  }\\n\\n  /**\\n   * Admin claims native USDB yield and send to treasury address\\n   */\\n  function claimUSDBYield() external onlyPoolAdmin {\\n    uint256 amount = USDB.getClaimableAmount(address(this));\\n    USDB.claim(treasury, amount);\\n  }\\n\\n  /**\\n   * @dev Admin only - add stake and future yield token pair\\n   *\\n   * @param stakeToken address of token used to stake, `address(0)` for ETH\\n   * @param yieldToken address of fyETH or fyUSDB token\\n   */\\n  function addSupportYieldTokens(\\n    address stakeToken,\\n    address yieldToken\\n  ) external onlyPoolAdmin {\\n    if (stakeToken != address(0) && stakeToken != address(USDB)) revert();\\n    yieldTokens[stakeToken] = yieldToken;\\n  }\\n\\n  /**\\n   * @dev Admin only - add new staking pool\\n   *\\n   * @param timelock staking lock time in seconds\\n   * @param yieldAPY yieldAPY\\n   * @param stakeToken token address use for staking\\n   */\\n  function addLockedPools(\\n    uint256 timelock,\\n    uint256 yieldAPY,\\n    address stakeToken\\n  ) external onlyPoolAdmin returns (uint256 poolId) {\\n    if (timelock == 0 || yieldAPY == 0) revert InvalidArguments();\\n    address yieldToken = yieldTokens[stakeToken];\\n    if (yieldToken == address(0)) revert InvalidArguments();\\n\\n    poolId = nextPoolId;\\n    poolInfo[poolId] = LockedPoolInfo(\\n      timelock,\\n      yieldAPY,\\n      yieldToken,\\n      stakeToken,\\n      0,\\n      0,\\n      true\\n    );\\n\\n    nextPoolId = poolId + 1;\\n\\n    emit PoolCreated(poolId, timelock, yieldAPY, yieldToken, stakeToken);\\n  }\\n\\n  /**\\n   * @dev Admin only - close staking pools\\n   * Closed pool will not accept new staking\\n   *\\n   * @param poolId poolId\\n   */\\n  function closePool(uint256 poolId) external onlyPoolAdmin {\\n    poolInfo[poolId].enabled = false;\\n  }\\n\\n  /**\\n   * @dev Admin only - set pool yield APY\\n   * @notice do not change pool APY after user start staking in the pool\\n   *\\n   * @param poolId poolId\\n   * @param yield  yieldAPY\\n   */\\n  function setPoolYield(uint256 poolId, uint256 yield) external onlyPoolAdmin {\\n    if (poolId == 0 || yield == 0) revert InvalidArguments();\\n    if (poolInfo[poolId].timelock == 0) revert PoolNotExisted(poolId);\\n\\n    poolInfo[poolId].yieldAPY = yield;\\n  }\\n\\n  /**\\n   * @dev get total yield generated corresponding to staking tokens\\n   *\\n   * @param token staking token\\n   */\\n  function getYieldAmount(address token) internal view returns (uint256) {\\n    if (token == address(0)) return blast.readClaimableYield(address(this));\\n    else if (token == address(USDB))\\n      return USDB.getClaimableAmount(address(this));\\n    else return 0;\\n  }\\n\\n  /**\\n   * @dev claim yield token to treasury\\n   *\\n   * @param token staking token\\n   */\\n  function claimYield(address token) internal {\\n    if (token == address(0)) {\\n      blast.claimAllYield(address(this), treasury);\\n    } else if (token == address(USDB)) {\\n      uint256 amount = USDB.getClaimableAmount(address(this));\\n      USDB.claim(treasury, amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev get amount of yield token generated by staking position\\n   *\\n   * @param poolId poolId\\n   * @param stakeId staking Id\\n   */\\n  function getGeneratedYield(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external view override returns (uint256) {\\n    StakingInfo memory staked = stakeInfo[poolId][stakeId];\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    uint256 yield = getYieldAmount(pool.stakeToken);\\n    uint256 yieldPerStaked = accYieldPerStaked[pool.stakeToken];\\n    yieldPerStaked += (yield * 1e25) / tokenTotalStaked[pool.stakeToken];\\n    return (staked.amount * yieldPerStaked) / 1e24 - staked.yieldDebt;\\n  }\\n\\n  /**\\n   * @dev get staking position info\\n   *\\n   * @param poolId poolId\\n   * @param stakeId stakeId\\n   */\\n  function getStakeInfo(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external view returns (StakingInfo memory) {\\n    return stakeInfo[poolId][stakeId];\\n  }\\n\\n  /**\\n   * @dev get user stake ids\\n   * \\n   * @param poolId poolId\\n   * @param account account address\\n   */\\n  function getUserStakesIds(uint256 poolId, address account) external view returns (uint256[] memory) {\\n    return userStakeIds[poolId][account];\\n  }\\n\\n  function getUserStakeIdByIndex(uint256 poolId, address account, uint256 index) external view returns (uint256) {\\n    return userStakeIds[poolId][account][index];\\n  }\\n\\n  /**\\n   * @dev get number of staking times of an account in a pool\\n   *\\n   * @param poolId poolId\\n   * @param account account address\\n   */\\n  function stakeTimes(\\n    uint256 poolId,\\n    address account\\n  ) external view returns (uint256) {\\n    return userStakeIds[poolId][account].length;\\n  }\\n\\n  function _updateAccYield(address stakeToken) internal {\\n    uint256 totalStaked = tokenTotalStaked[stakeToken];\\n    if (totalStaked != 0) {\\n      uint256 yield = getYieldAmount(stakeToken);\\n      accYieldPerStaked[stakeToken] += (yield * 1e24) / totalStaked;\\n    }\\n\\n    claimYield(stakeToken);\\n  }\\n\\n  function _deleteStakingInfo(uint256 poolId, uint256 stakeId) internal {\\n    delete stakeInfo[poolId][stakeId];\\n    uint256[] storage stakeIds = userStakeIds[poolId][msg.sender];\\n    // remove stakeId from list\\n    for (uint i; i < stakeIds.length; i++) {\\n      if (stakeIds[i] == stakeId) {\\n        stakeIds[i] = stakeIds[stakeIds.length - 1];\\n        stakeIds.pop();\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev stake token into an pool with `poolId`\\n   * @notice if staking ETH, amount of wei send to contract must be equal to `amount` param\\n   *\\n   * @param poolId poolId\\n   * @param amount staking amount\\n   */\\n  function stake(uint256 poolId, uint256 amount) external payable {\\n    if (amount == 0) revert InvalidArguments();\\n    // revert if stake over 100 times in a pool to prevent out of gas when unstake\\n    if (userStakeIds[poolId][msg.sender].length > 100) revert TooManyStake();\\n\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0 || pool.enabled == false) revert PoolClosed(poolId);\\n    _updateAccYield(pool.stakeToken);\\n\\n    uint256 yieldAmount = (amount * pool.yieldAPY * pool.timelock) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    uint256 yieldDebt = (amount * accYieldPerStaked[pool.stakeToken]) / 1e24;\\n\\n    StakingInfo memory staking = StakingInfo(\\n      msg.sender,\\n      amount,\\n      block.timestamp,\\n      block.timestamp + pool.timelock,\\n      yieldAmount,\\n      yieldDebt\\n    );\\n\\n    // --------------------- save stats data ---------------------------\\n    uint256 stakeId = poolInfo[poolId].nextStakeId;\\n    poolInfo[poolId].nextStakeId += 1;\\n    stakeInfo[poolId][stakeId] = staking;\\n\\n    poolInfo[poolId].totalStaked += amount;\\n    if (userStakeIds[poolId][msg.sender].length == 0) {\\n      noUsersStaked[poolId] += 1;\\n    }\\n    userStakeIds[poolId][msg.sender].push(stakeId);\\n    tokenTotalStaked[pool.stakeToken] += amount;\\n\\n    TokenTransfer._depositToken(pool.stakeToken, msg.sender, amount);\\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, yieldAmount);\\n\\n    emit Stake(\\n      poolId,\\n      stakeId,\\n      pool.timelock,\\n      pool.yieldAPY,\\n      pool.yieldToken,\\n      pool.stakeToken,\\n      amount\\n    );\\n  }\\n\\n  function extendsPosition(uint256 poolId, uint256 stakeId, uint256 extraDuration) external {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n    _updateAccYield(pool.stakeToken);\\n\\n    StakingInfo storage staked = stakeInfo[poolId][stakeId];\\n    if (staked.amount == 0) revert NoStaking();\\n    if (staked.user != msg.sender) revert NotStaker(msg.sender);\\n\\n    uint256 yieldedAmnt = (staked.amount *\\n      accYieldPerStaked[pool.stakeToken]) /\\n      1e24 -\\n      staked.yieldDebt;\\n\\n    staked.unlockTime += extraDuration;\\n    if (staked.unlockTime - staked.stakeTime > (365 * 86400 * 10)) revert ExceededMaxDuration();\\n\\n    uint256 extraYield = (staked.amount * pool.yieldAPY * extraDuration) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    staked.yieldAmount += extraYield;\\n    staked.yieldDebt = (staked.amount * accYieldPerStaked[pool.stakeToken]) / 1e24 - yieldedAmnt;\\n\\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, extraYield);\\n\\n    emit Extend(\\n      poolId,\\n      stakeId,\\n      extraDuration\\n    );\\n  }\\n\\n  /**\\n   * @dev unstake postion when locked time is passed\\n   *\\n   * @param poolId poolId\\n   * @param stakeId stake position id\\n   */\\n  function unstake(uint256 poolId, uint256 stakeId) external {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n    _updateAccYield(pool.stakeToken);\\n\\n    StakingInfo memory staked = stakeInfo[poolId][stakeId];\\n    if (staked.amount == 0) revert NoStaking();\\n    if (staked.unlockTime > block.timestamp) revert Locked(staked.unlockTime);\\n    if (staked.user != msg.sender) revert NotStaker(msg.sender);\\n\\n    poolInfo[poolId].totalStaked -= staked.amount;\\n    tokenTotalStaked[pool.stakeToken] -= staked.amount;\\n    _deleteStakingInfo(poolId, stakeId);\\n\\n    if (userStakeIds[poolId][msg.sender].length == 0) {\\n      noUsersStaked[poolId] -= 1;\\n    }\\n\\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, staked.amount);\\n\\n    emit Unstake(poolId, stakeId, pool.stakeToken, staked.amount);\\n  }\\n\\n  /**\\n   * @dev repay to unlock position prematurely by staking token\\n   * the amount of token need to be repay will be:\\n   *\\n   * stakeInfo.yieldAmount - yieldGeneratedByStakePosition\\n   *\\n   * if repay using ETH, any spares amount will be returned to `msg.sender`\\n   *\\n   * @param poolId pool id\\n   * @param stakeId position id\\n   */\\n  function repayWithStakeToken(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external payable override {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n    StakingInfo memory staking = stakeInfo[poolId][stakeId];\\n    if (staking.amount == 0) revert NoStaking();\\n    _updateAccYield(pool.stakeToken);\\n\\n    uint256 yieldedAmnt = (staking.amount *\\n      accYieldPerStaked[pool.stakeToken]) /\\n      1e24 -\\n      staking.yieldDebt;\\n    uint256 requireAmnt = 0;\\n    if (staking.yieldAmount > yieldedAmnt) {\\n      requireAmnt = staking.yieldAmount - yieldedAmnt;\\n    }\\n\\n    if (pool.stakeToken == address(0) && msg.value < requireAmnt)\\n      revert InsufficientAmount(requireAmnt);\\n    if (requireAmnt > staking.yieldAmount) requireAmnt = staking.yieldAmount;\\n\\n    poolInfo[poolId].totalStaked -= requireAmnt;\\n    tokenTotalStaked[pool.stakeToken] -= requireAmnt;\\n    if (userStakeIds[poolId][msg.sender].length == 0) {\\n      noUsersStaked[poolId] -= 1;\\n    }\\n    _deleteStakingInfo(poolId, stakeId);\\n\\n    TokenTransfer._depositAndReturnSpare(\\n      pool.stakeToken,\\n      msg.sender,\\n      treasury,\\n      requireAmnt\\n    );\\n    // return stake\\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, staking.amount);\\n\\n    emit Repay(poolId, stakeId, pool.stakeToken, staking.amount, requireAmnt);\\n  }\\n\\n  /**\\n   * @dev repay to unlock position prematurely by future yield token\\n   * the amount of token need to be repay will be:\\n   *\\n   * stakeInfo.yieldAmount - yieldGeneratedByStakePosition\\n   *\\n   * @param poolId pool id\\n   * @param stakeId position id\\n   */\\n  function repayWithYieldToken(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external override {\\n    LockedPoolInfo memory pool = poolInfo[poolId];\\n    if (pool.timelock == 0) revert PoolNotExisted(poolId);\\n    StakingInfo memory staking = stakeInfo[poolId][stakeId];\\n    if (staking.amount == 0) revert NoStaking();\\n    if (staking.user != msg.sender) revert NotStaker(staking.user);\\n    _updateAccYield(pool.stakeToken);\\n\\n    uint256 yieldedAmnt = (staking.amount *\\n      accYieldPerStaked[pool.stakeToken]) /\\n      1e24 -\\n      staking.yieldDebt;\\n    uint256 requireAmnt = 0;\\n    if (staking.yieldAmount > yieldedAmnt) {\\n      requireAmnt = staking.yieldAmount - yieldedAmnt;\\n    }\\n\\n    poolInfo[poolId].totalStaked -= requireAmnt;\\n    tokenTotalStaked[pool.stakeToken] -= requireAmnt;\\n    if (userStakeIds[poolId][msg.sender].length == 0) {\\n      noUsersStaked[poolId] -= 1;\\n    }\\n    _deleteStakingInfo(poolId, stakeId);\\n\\n    TokenTransfer._depositAndReturnSpare(\\n      pool.yieldToken,\\n      msg.sender,\\n      treasury,\\n      requireAmnt\\n    );\\n    // return stake\\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, staking.amount);\\n\\n    emit Repay(poolId, stakeId, pool.stakeToken, staking.amount, requireAmnt);\\n  }\\n}\\n\",\"keccak256\":\"0x7a8f46d1c91a37b042f96039de9d865bc84ded57d9e753e5f28dbc359731efd3\",\"license\":\"MIT\"},\"contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE \\n}\\n\\ninterface IBlast{\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\",\"keccak256\":\"0xb94a575fdf3be5029b157f43ffe585167d2d911777e6af156ef17b8441275d2f\",\"license\":\"MIT\"},\"contracts/interface/IERC20Mintable.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n  function mint(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x201e45d0d2667fbafebc8f21057ce9e708056f2cda3011a567b5c0b9d3553124\",\"license\":\"MIT\"},\"contracts/interface/IERC20Rebasing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC20Mintable.sol\\\";\\n\\nenum RebaseYieldMode {\\n  AUTOMATIC,\\n  VOID,\\n  CLAIMABLE\\n}\\n\\ninterface IERC20Rebasing is IERC20Mintable {\\n  // changes the yield mode of the caller and update the balance\\n  // to reflect the configuration\\n  function configure(RebaseYieldMode) external returns (uint256);\\n\\n  // \\\"claimable\\\" yield mode accounts can call this this claim their yield\\n  // to another address\\n  function claim(address recipient, uint256 amount) external returns (uint256);\\n\\n  // read the claimable amount for an account\\n  function getClaimableAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf7a4a255bc133fb7a28e193d933d2e39e8153d281d8fb6cbef599b45ee41dc3b\",\"license\":\"MIT\"},\"contracts/interface/ILockedStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface ILockedStaking {\\n  error NotPoolAdmin(address user);\\n  error InvalidArguments();\\n  error TooManyStake();\\n  error PoolClosed(uint256 id);\\n  error PoolNotExisted(uint256 id);\\n  error NoStaking();\\n  error Locked(uint256 until);\\n  error NotStaker(address user);\\n  error InsufficientAmount(uint256 required);\\n  error ExceededMaxDuration();\\n\\n  struct LockedPoolInfo {\\n    uint256 timelock;\\n    uint256 yieldAPY;\\n    address yieldToken;\\n    address stakeToken;\\n    uint256 totalStaked;\\n    uint256 nextStakeId;\\n    bool enabled;\\n  }\\n\\n  struct StakingInfo {\\n    address user;\\n    uint256 amount;\\n    uint256 stakeTime;\\n    uint256 unlockTime;\\n    uint256 yieldAmount;\\n    uint256 yieldDebt; // used for calculate generated yield\\n  }\\n\\n  event PoolCreated(\\n    uint256 id,\\n    uint256 timelock,\\n    uint256 yieldAPY,\\n    address yieldToken,\\n    address stakeToken\\n  );\\n\\n  event Stake(\\n    uint256 poolId,\\n    uint256 stakeId,\\n    uint256 timelock,\\n    uint256 yield,\\n    address yieldToken,\\n    address stakeToken,\\n    uint256 amount\\n  );\\n\\n  event Unstake(\\n    uint256 poolId,\\n    uint256 stakeId,\\n    address stakeToken,\\n    uint256 totalAmount\\n  );\\n  \\n  event Extend(\\n    uint256 poolId,\\n    uint256 stakeId,\\n    uint256 duration\\n  );\\n\\n  event Repay(\\n    uint256 poolId,\\n    uint256 stakeId,\\n    address token,\\n    uint256 totalStaked,\\n    uint256 repayAmount\\n  );\\n\\n  function stake(uint256 poolId, uint256 amount) external payable;\\n\\n  function unstake(uint256 poolId, uint256 stakeId) external;\\n\\n  function getGeneratedYield(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external view returns (uint256);\\n\\n  function repayWithStakeToken(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external payable;\\n\\n  function repayWithYieldToken(\\n    uint256 poolId,\\n    uint256 stakeId\\n  ) external;\\n}\\n\",\"keccak256\":\"0x831ce16b24f47b5e12e6df4496ba99149f8e0137231d7687f6d26337af91b6fa\",\"license\":\"MIT\"},\"contracts/interface/IRoleControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IRoleControl is IAccessControl {\\n  \\n}\\n\",\"keccak256\":\"0x96b1f3c3213c5364a4f2a8a86ef2b582250684eb790964bc6ac7d776e5310ab1\",\"license\":\"MIT\"},\"contracts/lib/TokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/IERC20Mintable.sol\\\";\\n\\nlibrary TokenTransfer {\\n  using SafeERC20 for IERC20;\\n  error InvalidTokenAmounts(uint256 amount);\\n\\n  function _depositToken(address token, address from, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount != msg.value) revert InvalidTokenAmounts(amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, address(this), amount);\\n    }\\n  }\\n\\n  function _depositAndReturnSpare(address token, address from, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount > msg.value) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n      payable(from).transfer(msg.value - amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n  }\\n\\n  function _transferToken(address token, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (address(this).balance < amount) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n    } else {\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n  }\\n\\n  function _mintToken(address token, address to, uint256 amount) internal {\\n    IERC20Mintable(token).mint(to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x5793004c88278f9dbf3c5545caf7694fab2ef5398043bd1037c485241f26e961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806394caca16116100f7578063be22e17b11610095578063ed03cdec11610064578063ed03cdec14610696578063f09a4016146106d3578063f0f44260146106fc578063f7f72a2514610725576101cd565b8063be22e17b146105c8578063c6cf7c5f14610605578063cf85c2fb14610642578063d22548131461066b576101cd565b8063a2a81aef116100d1578063a2a81aef1461050c578063a4951daf14610549578063b8f6dba714610560578063bd7b108a1461058b576101cd565b806394caca16146104915780639a45228f146104ba5780639e2c8a5b146104e3576101cd565b80632b3f7d1c1161016f5780634302a2f21161013e5780634302a2f2146103d057806361d027b31461040d5780637b0472f0146104385780637e880fa614610454576101cd565b80632b3f7d1c1461032357806331a0edec1461036057806337bb397e1461038b57806337de615f146103a7576101cd565b80631526fe27116101ab5780631526fe2714610263578063175e1a7d146102a657806319260c86146102d157806326ea6a8e146102fa576101cd565b80630dfe85d8146101d25780630f5baf611461020f578063125e1c3214610226575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190614a08565b61074e565b6040516102069190614a44565b60405180910390f35b34801561021b57600080fd5b50610224610766565b005b34801561023257600080fd5b5061024d60048036038101906102489190614abd565b61092a565b60405161025a9190614bbb565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190614a08565b6109d3565b60405161029d9796959493929190614c07565b60405180910390f35b3480156102b257600080fd5b506102bb610a62565b6040516102c89190614cd5565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f39190614cf0565b610a88565b005b34801561030657600080fd5b50610321600480360381019061031c9190614d1d565b610c6b565b005b34801561032f57600080fd5b5061034a60048036038101906103459190614d1d565b61118b565b6040516103579190614de7565b60405180910390f35b34801561036c57600080fd5b50610375611252565b6040516103829190614e23565b60405180910390f35b6103a560048036038101906103a09190614d1d565b611278565b005b3480156103b357600080fd5b506103ce60048036038101906103c99190614a08565b6117b5565b005b3480156103dc57600080fd5b506103f760048036038101906103f29190614cf0565b6118e6565b6040516104049190614a44565b60405180910390f35b34801561041957600080fd5b506104226118fe565b60405161042f9190614e3e565b60405180910390f35b610452600480360381019061044d9190614d1d565b611924565b005b34801561046057600080fd5b5061047b60048036038101906104769190614e59565b611f5a565b6040516104889190614a44565b60405180910390f35b34801561049d57600080fd5b506104b860048036038101906104b39190614eac565b61231a565b005b3480156104c657600080fd5b506104e160048036038101906104dc9190614d1d565b612530565b005b3480156104ef57600080fd5b5061050a60048036038101906105059190614d1d565b6126ef565b005b34801561051857600080fd5b50610533600480360381019061052e9190614abd565b612b8e565b6040516105409190614a44565b60405180910390f35b34801561055557600080fd5b5061055e612bec565b005b34801561056c57600080fd5b50610575612e50565b6040516105829190614f05565b60405180910390f35b34801561059757600080fd5b506105b260048036038101906105ad9190614d1d565b612e74565b6040516105bf9190614a44565b60405180910390f35b3480156105d457600080fd5b506105ef60048036038101906105ea9190614cf0565b61314c565b6040516105fc9190614a44565b60405180910390f35b34801561061157600080fd5b5061062c60048036038101906106279190614cf0565b613164565b6040516106399190614e3e565b60405180910390f35b34801561064e57600080fd5b5061066960048036038101906106649190614cf0565b613197565b005b34801561067757600080fd5b5061068061335c565b60405161068d9190614a44565b60405180910390f35b3480156106a257600080fd5b506106bd60048036038101906106b89190614f20565b613363565b6040516106ca9190614a44565b60405180910390f35b3480156106df57600080fd5b506106fa60048036038101906106f59190614eac565b6133db565b005b34801561070857600080fd5b50610723600480360381019061071e9190614cf0565b613595565b005b34801561073157600080fd5b5061074c60048036038101906107479190614f73565b6136d8565b005b60086020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016107e3929190614fc6565b602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610824919061501b565b61086557336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161085c9190614e3e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663860043b630600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016108e4929190615048565b6020604051808303816000875af1158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190615086565b50565b60606007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109c657602002820191906000526020600020905b8154815260200190600101908083116109b2575b5050505050905092915050565b60056020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154908060060160009054906101000a900460ff16905087565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610b05929190614fc6565b602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b46919061501b565b610b8757336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610b7e9190614e3e565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a33757d60026040518263ffffffff1660e01b8152600401610c24919061512a565b6020604051808303816000875af1158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c679190615086565b5050565b6000600560008481526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16151515158152505090506000816000015103610dc557826040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610dbc9190614a44565b60405180910390fd5b60006006600085815260200190815260200160002060008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505090506000816020015103610ebe576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610f365780600001516040517fbf211949000000000000000000000000000000000000000000000000000000008152600401610f2d9190614e3e565b60405180910390fd5b610f438260600151613b55565b60008160a0015169d3c21bcecceda1000000600b6000866060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548460200151610fa89190615174565b610fb291906151e5565b610fbc9190615216565b905060008183608001511115610fdf57818360800151610fdc9190615216565b90505b806005600088815260200190815260200160002060040160008282546110059190615216565b9250508190555080600a6000866060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461105f9190615216565b9250508190555060006007600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050036110ed5760016008600088815260200190815260200160002060008282546110e59190615216565b925050819055505b6110f78686613c33565b611129846040015133600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613dc4565b61113c8460600151338560200151613f0f565b7f31623a4b049142fb8415bf5de71a2defe23aa67120cd7b92875f124a6a771bf18686866060015186602001518560405161117b95949392919061524a565b60405180910390a1505050505050565b611193614981565b6006600084815260200190815260200160002060008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050905092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008481526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050905060008160000151036113d257826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016113c99190614a44565b60405180910390fd5b60006006600085815260200190815260200160002060008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481525050905060008160200151036114cb576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114d88260600151613b55565b60008160a0015169d3c21bcecceda1000000600b6000866060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846020015161153d9190615174565b61154791906151e5565b6115519190615216565b905060008183608001511115611574578183608001516115719190615216565b90505b600073ffffffffffffffffffffffffffffffffffffffff16846060015173ffffffffffffffffffffffffffffffffffffffff161480156115b357508034105b156115f557806040517f77b8dde30000000000000000000000000000000000000000000000000000000081526004016115ec9190614a44565b60405180910390fd5b826080015181111561160957826080015190505b8060056000888152602001908152602001600020600401600082825461162f9190615216565b9250508190555080600a6000866060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116899190615216565b9250508190555060006007600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500361171757600160086000888152602001908152602001600020600082825461170f9190615216565b925050819055505b6117218686613c33565b611753846060015133600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613dc4565b6117668460600151338560200151613f0f565b7f31623a4b049142fb8415bf5de71a2defe23aa67120cd7b92875f124a6a771bf1868686606001518660200151856040516117a595949392919061524a565b60405180910390a1505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611832929190614fc6565b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611873919061501b565b6118b457336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016118ab9190614e3e565b60405180910390fd5b60006005600083815260200190815260200160002060060160006101000a81548160ff02191690831515021790555050565b600a6020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000810361195e576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60646007600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011156119ec576040517fea83602800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008481526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815250509050600081600001511480611b185750600015158160c001511515145b15611b5a57826040517f925a1975000000000000000000000000000000000000000000000000000000008152600401611b519190614a44565b60405180910390fd5b611b678160600151613b55565b60006201518061016d620186a08460000151856020015187611b899190615174565b611b939190615174565b611b9d91906151e5565b611ba791906151e5565b611bb191906151e5565b9050600069d3c21bcecceda1000000600b6000856060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611c0f9190615174565b611c1991906151e5565b905060006040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001428152602001856000015142611c60919061529d565b81526020018481526020018381525090506000600560008881526020019081526020016000206005015490506001600560008981526020019081526020016000206005016000828254611cb3919061529d565b925050819055508160066000898152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015590505085600560008981526020019081526020016000206004016000828254611d81919061529d565b9250508190555060006007600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003611e0f576001600860008981526020019081526020016000206000828254611e07919061529d565b925050819055505b6007600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505585600a6000876060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ed9919061529d565b92505081905550611eef85606001513388614005565b611efe856040015133866140b5565b7f744c88218bcd76ee9dc8a3b547422d17df0ff9b373dbde60d6efec9bf1ce26e387828760000151886020015189604001518a606001518c604051611f4997969594939291906152d1565b60405180910390a150505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611fd9929190614fc6565b602060405180830381865afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a919061501b565b61205b57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016120529190614e3e565b60405180910390fd5b600084148061206a5750600083145b156120a1576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361216b576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045491506040518060e001604052808681526020018581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016001151581525060056000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050506001826122cd919061529d565b6004819055507faec16eea69e3a8763af09e92376830a1b7d14ea846be92dc9998f419c5f03a1e828686848760405161230a959493929190615340565b60405180910390a1509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401612397929190614fc6565b602060405180830381865afa1580156123b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d8919061501b565b61241957336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016124109190614e3e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156124a45750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156124ae57600080fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016125ad929190614fc6565b602060405180830381865afa1580156125ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ee919061501b565b61262f57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016126269190614e3e565b60405180910390fd5b600082148061263e5750600081145b15612675576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006005600084815260200190815260200160002060000154036126d057816040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016126c79190614a44565b60405180910390fd5b8060056000848152602001908152602001600020600101819055505050565b6000600560008481526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815250509050600081600001510361284957826040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016128409190614a44565b60405180910390fd5b6128568160600151613b55565b60006006600085815260200190815260200160002060008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250509050600081602001510361294f576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160600151111561299c5780606001516040517f032bc66b0000000000000000000000000000000000000000000000000000000081526004016129939190614a44565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614612a1057336040517fbf211949000000000000000000000000000000000000000000000000000000008152600401612a079190614e3e565b60405180910390fd5b8060200151600560008681526020019081526020016000206004016000828254612a3a9190615216565b925050819055508060200151600a6000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a989190615216565b92505081905550612aa98484613c33565b60006007600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003612b30576001600860008681526020019081526020016000206000828254612b289190615216565b925050819055505b612b438260600151338360200151613f0f565b7fa1a24eca1af5deeccac6dbbfb5446f9520a2f7a5c8c5a8ffc5418937543e62fc848484606001518460200151604051612b809493929190615393565b60405180910390a150505050565b60006007600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401612c69929190614fc6565b602060405180830381865afa158015612c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caa919061501b565b612ceb57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401612ce29190614e3e565b60405180910390fd5b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12f3a61306040518263ffffffff1660e01b8152600401612d479190614e3e565b602060405180830381865afa158015612d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d889190615086565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aad3ec96600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401612e099291906153d8565b6020604051808303816000875af1158015612e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4c9190615086565b5050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b6000806006600085815260200190815260200160002060008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505090506000600560008681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050905060006130508260600151614127565b90506000600b6000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600a6000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546a084595161401484a000000836130f59190615174565b6130ff91906151e5565b8161310a919061529d565b90508360a0015169d3c21bcecceda100000082866020015161312c9190615174565b61313691906151e5565b6131409190615216565b94505050505092915050565b600b6020528060005260406000206000915090505481565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401613214929190614fc6565b602060405180830381865afa158015613231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613255919061501b565b61329657336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161328d9190614e3e565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561334157600080fd5b505af1158015613355573d6000803e3d6000fd5b5050505050565b620186a081565b60006007600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106133c7576133c6615401565b5b906000526020600020015490509392505050565b60008060019054906101000a900460ff1615905080801561340c5750600160008054906101000a900460ff1660ff16105b80613439575061341b30614301565b1580156134385750600160008054906101000a900460ff1660ff16145b5b613478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161346f906154b3565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156134b5576001600060016101000a81548160ff0219169083151502179055505b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156135905760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051613587919061551b565b60405180910390a15b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401613612929190614fc6565b602060405180830381865afa15801561362f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613653919061501b565b61369457336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161368b9190614e3e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600560008581526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff1615151515815250509050600081600001510361383257836040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016138299190614a44565b60405180910390fd5b61383f8160600151613b55565b6000600660008681526020019081526020016000206000858152602001908152602001600020905060008160010154036138a5576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461393957336040517fbf2119490000000000000000000000000000000000000000000000000000000081526004016139309190614e3e565b60405180910390fd5b6000816005015469d3c21bcecceda1000000600b6000866060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846001015461399e9190615174565b6139a891906151e5565b6139b29190615216565b9050838260030160008282546139c8919061529d565b925050819055506312cc0300826002015483600301546139e89190615216565b1115613a20576040517fd902924300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006201518061016d620186a08787602001518760010154613a429190615174565b613a4c9190615174565b613a5691906151e5565b613a6091906151e5565b613a6a91906151e5565b905080836004016000828254613a80919061529d565b925050819055508169d3c21bcecceda1000000600b6000876060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560010154613ae69190615174565b613af091906151e5565b613afa9190615216565b8360050181905550613b11846040015133836140b5565b7f3480fc0f279df6d05a679eb53cce25283477e940aca754409538b72485edfb29878787604051613b4493929190615536565b60405180910390a150505050505050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114613c26576000613bac83614127565b90508169d3c21bcecceda100000082613bc59190615174565b613bcf91906151e5565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613c1d919061529d565b92505081905550505b613c2f82614324565b5050565b600660008381526020019081526020016000206000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090556005820160009055505060006007600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015613dbe5782828281548110613d2057613d1f615401565b5b906000526020600020015403613dab578160018380549050613d429190615216565b81548110613d5357613d52615401565b5b9060005260206000200154828281548110613d7157613d70615401565b5b906000526020600020018190555081805480613d9057613d8f61556d565b5b60019003818190600052602060002001600090559055613dbe565b8080613db69061559c565b915050613d00565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603613edb5734811115613e3d57806040517f83b9f0ae000000000000000000000000000000000000000000000000000000008152600401613e349190614a44565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613e83573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff166108fc8234613eaa9190615216565b9081150290604051600060405180830381858888f19350505050158015613ed5573d6000803e3d6000fd5b50613f09565b613f088383838773ffffffffffffffffffffffffffffffffffffffff166145dd909392919063ffffffff16565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613fd45780471015613f8857806040517f83b9f0ae000000000000000000000000000000000000000000000000000000008152600401613f7f9190614a44565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613fce573d6000803e3d6000fd5b50614000565b613fff82828573ffffffffffffffffffffffffffffffffffffffff166146669092919063ffffffff16565b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036140825734811461407d57806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016140749190614a44565b60405180910390fd5b6140b0565b6140af8230838673ffffffffffffffffffffffffffffffffffffffff166145dd909392919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016140f09291906153d8565b600060405180830381600087803b15801561410a57600080fd5b505af115801561411e573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036141ff57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec3278e8306040518263ffffffff1660e01b81526004016141b79190614e3e565b602060405180830381865afa1580156141d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f89190615086565b90506142fc565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036142f757600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12f3a61306040518263ffffffff1660e01b81526004016142af9190614e3e565b602060405180830381865afa1580156142cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142f09190615086565b90506142fc565b600090505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361442057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663860043b630600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016143d7929190615048565b6020604051808303816000875af11580156143f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441a9190615086565b506145da565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036145d95760008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12f3a61306040518263ffffffff1660e01b81526004016144d19190614e3e565b602060405180830381865afa1580156144ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145129190615086565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aad3ec96600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016145939291906153d8565b6020604051808303816000875af11580156145b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d69190615086565b50505b5b50565b614660846323b872dd60e01b8585856040516024016145fe939291906155e4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506146ec565b50505050565b6146e78363a9059cbb60e01b84846040516024016146859291906153d8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506146ec565b505050565b600061474e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166147b49092919063ffffffff16565b905060008151148061477057508080602001905181019061476f919061501b565b5b6147af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016147a69061568d565b60405180910390fd5b505050565b60606147c384846000856147cc565b90509392505050565b606082471015614811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148089061571f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161483a91906157b0565b60006040518083038185875af1925050503d8060008114614877576040519150601f19603f3d011682016040523d82523d6000602084013e61487c565b606091505b509150915061488d87838387614899565b92505050949350505050565b606083156148fb5760008351036148f3576148b38561490e565b6148f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148e990615813565b60405180910390fd5b5b829050614906565b6149058383614931565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156149445781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016149789190615888565b60405180910390fd5b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6149e5816149d2565b81146149f057600080fd5b50565b600081359050614a02816149dc565b92915050565b600060208284031215614a1e57614a1d6149cd565b5b6000614a2c848285016149f3565b91505092915050565b614a3e816149d2565b82525050565b6000602082019050614a596000830184614a35565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614a8a82614a5f565b9050919050565b614a9a81614a7f565b8114614aa557600080fd5b50565b600081359050614ab781614a91565b92915050565b60008060408385031215614ad457614ad36149cd565b5b6000614ae2858286016149f3565b9250506020614af385828601614aa8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614b32816149d2565b82525050565b6000614b448383614b29565b60208301905092915050565b6000602082019050919050565b6000614b6882614afd565b614b728185614b08565b9350614b7d83614b19565b8060005b83811015614bae578151614b958882614b38565b9750614ba083614b50565b925050600181019050614b81565b5085935050505092915050565b60006020820190508181036000830152614bd58184614b5d565b905092915050565b614be681614a7f565b82525050565b60008115159050919050565b614c0181614bec565b82525050565b600060e082019050614c1c600083018a614a35565b614c296020830189614a35565b614c366040830188614bdd565b614c436060830187614bdd565b614c506080830186614a35565b614c5d60a0830185614a35565b614c6a60c0830184614bf8565b98975050505050505050565b6000819050919050565b6000614c9b614c96614c9184614a5f565b614c76565b614a5f565b9050919050565b6000614cad82614c80565b9050919050565b6000614cbf82614ca2565b9050919050565b614ccf81614cb4565b82525050565b6000602082019050614cea6000830184614cc6565b92915050565b600060208284031215614d0657614d056149cd565b5b6000614d1484828501614aa8565b91505092915050565b60008060408385031215614d3457614d336149cd565b5b6000614d42858286016149f3565b9250506020614d53858286016149f3565b9150509250929050565b614d6681614a7f565b82525050565b60c082016000820151614d826000850182614d5d565b506020820151614d956020850182614b29565b506040820151614da86040850182614b29565b506060820151614dbb6060850182614b29565b506080820151614dce6080850182614b29565b5060a0820151614de160a0850182614b29565b50505050565b600060c082019050614dfc6000830184614d6c565b92915050565b6000614e0d82614ca2565b9050919050565b614e1d81614e02565b82525050565b6000602082019050614e386000830184614e14565b92915050565b6000602082019050614e536000830184614bdd565b92915050565b600080600060608486031215614e7257614e716149cd565b5b6000614e80868287016149f3565b9350506020614e91868287016149f3565b9250506040614ea286828701614aa8565b9150509250925092565b60008060408385031215614ec357614ec26149cd565b5b6000614ed185828601614aa8565b9250506020614ee285828601614aa8565b9150509250929050565b6000819050919050565b614eff81614eec565b82525050565b6000602082019050614f1a6000830184614ef6565b92915050565b600080600060608486031215614f3957614f386149cd565b5b6000614f47868287016149f3565b9350506020614f5886828701614aa8565b9250506040614f69868287016149f3565b9150509250925092565b600080600060608486031215614f8c57614f8b6149cd565b5b6000614f9a868287016149f3565b9350506020614fab868287016149f3565b9250506040614fbc868287016149f3565b9150509250925092565b6000604082019050614fdb6000830185614ef6565b614fe86020830184614bdd565b9392505050565b614ff881614bec565b811461500357600080fd5b50565b60008151905061501581614fef565b92915050565b600060208284031215615031576150306149cd565b5b600061503f84828501615006565b91505092915050565b600060408201905061505d6000830185614bdd565b61506a6020830184614bdd565b9392505050565b600081519050615080816149dc565b92915050565b60006020828403121561509c5761509b6149cd565b5b60006150aa84828501615071565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106150f3576150f26150b3565b5b50565b6000819050615104826150e2565b919050565b6000615114826150f6565b9050919050565b61512481615109565b82525050565b600060208201905061513f600083018461511b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061517f826149d2565b915061518a836149d2565b9250828202615198816149d2565b915082820484148315176151af576151ae615145565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006151f0826149d2565b91506151fb836149d2565b92508261520b5761520a6151b6565b5b828204905092915050565b6000615221826149d2565b915061522c836149d2565b925082820390508181111561524457615243615145565b5b92915050565b600060a08201905061525f6000830188614a35565b61526c6020830187614a35565b6152796040830186614bdd565b6152866060830185614a35565b6152936080830184614a35565b9695505050505050565b60006152a8826149d2565b91506152b3836149d2565b92508282019050808211156152cb576152ca615145565b5b92915050565b600060e0820190506152e6600083018a614a35565b6152f36020830189614a35565b6153006040830188614a35565b61530d6060830187614a35565b61531a6080830186614bdd565b61532760a0830185614bdd565b61533460c0830184614a35565b98975050505050505050565b600060a0820190506153556000830188614a35565b6153626020830187614a35565b61536f6040830186614a35565b61537c6060830185614bdd565b6153896080830184614bdd565b9695505050505050565b60006080820190506153a86000830187614a35565b6153b56020830186614a35565b6153c26040830185614bdd565b6153cf6060830184614a35565b95945050505050565b60006040820190506153ed6000830185614bdd565b6153fa6020830184614a35565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061549d602e83615430565b91506154a882615441565b604082019050919050565b600060208201905081810360008301526154cc81615490565b9050919050565b6000819050919050565b600060ff82169050919050565b60006155056155006154fb846154d3565b614c76565b6154dd565b9050919050565b615515816154ea565b82525050565b6000602082019050615530600083018461550c565b92915050565b600060608201905061554b6000830186614a35565b6155586020830185614a35565b6155656040830184614a35565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006155a7826149d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036155d9576155d8615145565b5b600182019050919050565b60006060820190506155f96000830186614bdd565b6156066020830185614bdd565b6156136040830184614a35565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615677602a83615430565b91506156828261561b565b604082019050919050565b600060208201905081810360008301526156a68161566a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000615709602683615430565b9150615714826156ad565b604082019050919050565b60006020820190508181036000830152615738816156fc565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015615773578082015181840152602081019050615758565b60008484015250505050565b600061578a8261573f565b615794818561574a565b93506157a4818560208601615755565b80840191505092915050565b60006157bc828461577f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006157fd601d83615430565b9150615808826157c7565b602082019050919050565b6000602082019050818103600083015261582c816157f0565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061585a82615833565b6158648185615430565b9350615874818560208601615755565b61587d8161583e565b840191505092915050565b600060208201905081810360008301526158a2818461584f565b90509291505056fea2646970667358221220d328f32ef13dfb12c190af02cd6c502e6f7218724d14933561d54c50a522eec964736f6c63430008140033",
  "devdoc": {
    "details": "Lock staking pool contract",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addLockedPools(uint256,uint256,address)": {
        "details": "Admin only - add new staking pool",
        "params": {
          "stakeToken": "token address use for staking",
          "timelock": "staking lock time in seconds",
          "yieldAPY": "yieldAPY"
        }
      },
      "addSupportYieldTokens(address,address)": {
        "details": "Admin only - add stake and future yield token pair",
        "params": {
          "stakeToken": "address of token used to stake, `address(0)` for ETH",
          "yieldToken": "address of fyETH or fyUSDB token"
        }
      },
      "closePool(uint256)": {
        "details": "Admin only - close staking pools Closed pool will not accept new staking",
        "params": {
          "poolId": "poolId"
        }
      },
      "getGeneratedYield(uint256,uint256)": {
        "details": "get amount of yield token generated by staking position",
        "params": {
          "poolId": "poolId",
          "stakeId": "staking Id"
        }
      },
      "getStakeInfo(uint256,uint256)": {
        "details": "get staking position info",
        "params": {
          "poolId": "poolId",
          "stakeId": "stakeId"
        }
      },
      "getUserStakesIds(uint256,address)": {
        "details": "get user stake ids ",
        "params": {
          "account": "account address",
          "poolId": "poolId"
        }
      },
      "repayWithStakeToken(uint256,uint256)": {
        "details": "repay to unlock position prematurely by staking token the amount of token need to be repay will be: stakeInfo.yieldAmount - yieldGeneratedByStakePosition if repay using ETH, any spares amount will be returned to `msg.sender`",
        "params": {
          "poolId": "pool id",
          "stakeId": "position id"
        }
      },
      "repayWithYieldToken(uint256,uint256)": {
        "details": "repay to unlock position prematurely by future yield token the amount of token need to be repay will be: stakeInfo.yieldAmount - yieldGeneratedByStakePosition",
        "params": {
          "poolId": "pool id",
          "stakeId": "position id"
        }
      },
      "setBlast(address)": {
        "params": {
          "_blast": "blast address"
        }
      },
      "setPoolYield(uint256,uint256)": {
        "details": "Admin only - set pool yield APY",
        "params": {
          "poolId": "poolId",
          "yield": "yieldAPY"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "treasury wallet address"
        }
      },
      "setUSDBRebasing(address)": {
        "params": {
          "usdb": "USDB token address"
        }
      },
      "stake(uint256,uint256)": {
        "details": "stake token into an pool with `poolId`",
        "params": {
          "amount": "staking amount",
          "poolId": "poolId"
        }
      },
      "stakeTimes(uint256,address)": {
        "details": "get number of staking times of an account in a pool",
        "params": {
          "account": "account address",
          "poolId": "poolId"
        }
      },
      "unstake(uint256,uint256)": {
        "details": "unstake postion when locked time is passed",
        "params": {
          "poolId": "poolId",
          "stakeId": "stake position id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimNativeYield()": {
        "notice": "Admin claims native yield and send to treasury address"
      },
      "claimUSDBYield()": {
        "notice": "Admin claims native USDB yield and send to treasury address"
      },
      "setBlast(address)": {
        "notice": "set native blast contract"
      },
      "setPoolYield(uint256,uint256)": {
        "notice": "do not change pool APY after user start staking in the pool"
      },
      "setTreasury(address)": {
        "notice": "set treasury address Treasury is the wallet used to receive all native yield"
      },
      "setUSDBRebasing(address)": {
        "notice": "set USDB token address"
      },
      "stake(uint256,uint256)": {
        "notice": "if staking ETH, amount of wei send to contract must be equal to `amount` param"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3520,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "USDB",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20Rebasing)6487"
      },
      {
        "astId": 3523,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "blast",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBlast)6440"
      },
      {
        "astId": 3526,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "roleControl",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoleControl)6801"
      },
      {
        "astId": 3528,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3530,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "nextPoolId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3535,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "poolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(LockedPoolInfo)6592_storage)"
      },
      {
        "astId": 3542,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "stakeInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(StakingInfo)6605_storage))"
      },
      {
        "astId": 3549,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "userStakeIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 3553,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "noUsersStaked",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3557,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "yieldTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3561,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "tokenTotalStaked",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3565,
        "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
        "label": "accYieldPerStaked",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlast)6440": {
        "encoding": "inplace",
        "label": "contract IBlast",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Rebasing)6487": {
        "encoding": "inplace",
        "label": "contract IERC20Rebasing",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleControl)6801": {
        "encoding": "inplace",
        "label": "contract IRoleControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(StakingInfo)6605_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ILockedStaking.StakingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(StakingInfo)6605_storage)"
      },
      "t_mapping(t_uint256,t_struct(LockedPoolInfo)6592_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILockedStaking.LockedPoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedPoolInfo)6592_storage"
      },
      "t_mapping(t_uint256,t_struct(StakingInfo)6605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILockedStaking.StakingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingInfo)6605_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LockedPoolInfo)6592_storage": {
        "encoding": "inplace",
        "label": "struct ILockedStaking.LockedPoolInfo",
        "members": [
          {
            "astId": 6579,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "timelock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6581,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldAPY",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6583,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6585,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "stakeToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6587,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "totalStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6589,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "nextStakeId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6591,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "enabled",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(StakingInfo)6605_storage": {
        "encoding": "inplace",
        "label": "struct ILockedStaking.StakingInfo",
        "members": [
          {
            "astId": 6594,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6596,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6598,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "stakeTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6600,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "unlockTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6602,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6604,
            "contract": "contracts/LockedStakingPools.sol:LockedStakingPools",
            "label": "yieldDebt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}