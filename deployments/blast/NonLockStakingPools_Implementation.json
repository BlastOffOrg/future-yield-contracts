{
  "address": "0xFa9397f1fa04FF86A89efB5663fE1c8A5544ec6b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidArguments",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidTokenAmounts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStaking",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NotPoolAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolNotExisted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDB",
      "outputs": [
        {
          "internalType": "contract IERC20Rebasing",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YIELD_DENOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        }
      ],
      "name": "addSupportYieldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blast",
      "outputs": [
        {
          "internalType": "contract IBlast",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimNativeYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "claimPendingReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUSDBYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "closePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "blastPointAddress",
          "type": "address"
        }
      ],
      "name": "configurePointsOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserStakePosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCalcTs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingReward",
              "type": "uint256"
            }
          ],
          "internalType": "struct INonLockStaking.StakePosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "roleControl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yieldAPY",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "yieldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blast",
          "type": "address"
        }
      ],
      "name": "setBlast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "name": "setPoolYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdb",
          "type": "address"
        }
      ],
      "name": "setUSDBRebasing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yieldTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdf5161b8898bc6c3bd82761f6804ab93220f10341448f911989fdc9c85cef69",
  "receipt": {
    "to": null,
    "from": "0xE8D35bFb4263B46F0bf308a654e4A8Eb9F9CDAA5",
    "contractAddress": "0xFa9397f1fa04FF86A89efB5663fE1c8A5544ec6b",
    "transactionIndex": 4,
    "gasUsed": "3118264",
    "logsBloom": "0x
    "blockHash": "0x7cf20a21eb6a1aa61fc46368e4c0d07cb197d53ce07895e86018c6062eecc770",
    "transactionHash": "0xbdf5161b8898bc6c3bd82761f6804ab93220f10341448f911989fdc9c85cef69",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 250125,
        "transactionHash": "0xbdf5161b8898bc6c3bd82761f6804ab93220f10341448f911989fdc9c85cef69",
        "address": "0xFa9397f1fa04FF86A89efB5663fE1c8A5544ec6b",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0x7cf20a21eb6a1aa61fc46368e4c0d07cb197d53ce07895e86018c6062eecc770"
      }
    ],
    "blockNumber": 250125,
    "cumulativeGasUsed": "3394506",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9f316dad025abefb93a4541cfbad3e0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotPoolAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolNotExisted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDB\",\"outputs\":[{\"internalType\":\"contract IERC20Rebasing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"}],\"name\":\"addSupportYieldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blast\",\"outputs\":[{\"internalType\":\"contract IBlast\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNativeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claimPendingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUSDBYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"blastPointAddress\",\"type\":\"address\"}],\"name\":\"configurePointsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCalcTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"internalType\":\"struct INonLockStaking.StakePosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roleControl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAPY\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blast\",\"type\":\"address\"}],\"name\":\"setBlast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"setPoolYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdb\",\"type\":\"address\"}],\"name\":\"setUSDBRebasing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"setBlast(address)\":{\"params\":{\"_blast\":\"blast address\"}},\"setUSDBRebasing(address)\":{\"params\":{\"usdb\":\"USDB token address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimUSDBYield()\":{\"notice\":\"Admin claims native USDB yield and send to treasury address\"},\"setBlast(address)\":{\"notice\":\"set native blast contract\"},\"setUSDBRebasing(address)\":{\"notice\":\"set USDB token address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NonLockStakingPools.sol\":\"NonLockStakingPools\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/NonLockStakingPools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interface/IERC20Mintable.sol\\\";\\nimport \\\"./interface/IERC20Rebasing.sol\\\";\\nimport \\\"./interface/INonLockStaking.sol\\\";\\nimport \\\"./interface/IRoleControl.sol\\\";\\nimport \\\"./interface/IBlast.sol\\\";\\nimport \\\"./lib/TokenTransfer.sol\\\";\\n\\ninterface IBlastPoints {\\n  function configurePointsOperator(address operator) external;\\n}\\n\\ncontract NonLockStakingPools is Initializable, INonLockStaking {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant YIELD_DENOM = 100000;\\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256(\\\"POOL_ADMIN_ROLE\\\");\\n\\n  IRoleControl roleControl;\\n  address public treasury;\\n  uint256 nextPoolId;\\n  mapping(address => address) public yieldTokens;\\n  mapping(uint256 => PoolInfo) public poolInfo;\\n  mapping(uint256 => mapping(address => StakePosition)) userStakes;\\n  mapping(uint256 => address[]) listUsers;\\n\\n  IERC20Rebasing public USDB;\\n  IBlast public blast;\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function init(address roleControl_, address treasury_) external initializer {\\n    roleControl = IRoleControl(roleControl_);\\n    if (treasury_ != address(0)) {\\n      treasury = treasury_;\\n    }\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    if (!roleControl.hasRole(POOL_ADMIN_ROLE, msg.sender))\\n      revert NotPoolAdmin(msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * set USDB token address\\n   *\\n   * @param usdb USDB token address\\n   */\\n  function setUSDBRebasing(address usdb) external onlyPoolAdmin {\\n    USDB = IERC20Rebasing(usdb);\\n    USDB.configure(RebaseYieldMode.CLAIMABLE);\\n  }\\n\\n  /**\\n   * set native blast contract\\n   *\\n   * @param _blast blast address\\n   */\\n  function setBlast(address _blast) external onlyPoolAdmin {\\n    blast = IBlast(_blast);\\n    blast.configureClaimableYield();\\n  }\\n\\n  function configurePointsOperator(\\n    address operator,\\n    address blastPointAddress\\n  ) external onlyPoolAdmin {\\n    IBlastPoints(address(blastPointAddress)).configurePointsOperator(operator);\\n  }\\n\\n  function setTreasury(address _treasury) external onlyPoolAdmin {\\n    treasury = _treasury;\\n  }\\n\\n  function claimNativeYield() external onlyPoolAdmin {\\n    IBlast(blast).claimAllYield(address(this), treasury);\\n  }\\n\\n  /**\\n   * Admin claims native USDB yield and send to treasury address\\n   */\\n  function claimUSDBYield() external onlyPoolAdmin {\\n    uint256 amount = USDB.getClaimableAmount(address(this));\\n    USDB.claim(treasury, amount);\\n  }\\n\\n  function addSupportYieldTokens(\\n    address stakeToken,\\n    address yieldToken\\n  ) external onlyPoolAdmin {\\n    yieldTokens[stakeToken] = yieldToken;\\n  }\\n\\n  function addPool(\\n    uint256 yieldAPY,\\n    address stakeToken\\n  ) external onlyPoolAdmin returns (uint256 poolId) {\\n    if (yieldAPY == 0) revert InvalidArguments();\\n    address yieldToken = yieldTokens[stakeToken];\\n    if (yieldToken == address(0)) revert InvalidArguments();\\n\\n    poolId = nextPoolId;\\n    poolInfo[poolId] = PoolInfo(yieldAPY, yieldToken, stakeToken, 0, true);\\n\\n    nextPoolId = poolId + 1;\\n\\n    emit PoolCreated(poolId, yieldAPY, yieldToken, stakeToken);\\n  }\\n\\n  function closePool(uint256 poolId) external onlyPoolAdmin {\\n    poolInfo[poolId].enabled = false;\\n    poolInfo[poolId].yieldAPY = 0;\\n  }\\n\\n  function setPoolYield(uint256 poolId, uint256 yield) external onlyPoolAdmin {\\n    if (poolId == 0 || yield == 0) revert InvalidArguments();\\n    if (poolInfo[poolId].enabled == false) revert PoolNotExisted(poolId);\\n\\n    poolInfo[poolId].yieldAPY = yield;\\n  }\\n\\n  function getUserStakePosition(\\n    uint256 poolId,\\n    address account\\n  ) external view returns (StakePosition memory) {\\n    return userStakes[poolId][account];\\n  }\\n\\n  function stake(uint256 poolId, uint256 amount) external payable override {\\n    PoolInfo memory pool = poolInfo[poolId];\\n    if (pool.enabled == false) revert PoolNotExisted(poolId);\\n\\n    StakePosition storage position = userStakes[poolId][msg.sender];\\n\\n    if (position.amount == 0) {\\n      userStakes[poolId][msg.sender] = StakePosition(\\n        amount,\\n        block.timestamp,\\n        0\\n      );\\n    } else {\\n      uint256 accuReward = ((block.timestamp - position.lastCalcTs) *\\n        position.amount *\\n        pool.yieldAPY) /\\n        YIELD_DENOM /\\n        365 /\\n        86400;\\n\\n      position.lastCalcTs = block.timestamp;\\n      position.pendingReward += accuReward;\\n      position.amount += amount;\\n    }\\n\\n    poolInfo[poolId].totalStaked += amount;\\n\\n    TokenTransfer._depositToken(pool.stakeToken, msg.sender, amount);\\n\\n    emit Stake(poolId, pool.yieldAPY, pool.yieldToken, pool.stakeToken, amount);\\n  }\\n\\n  function unstake(uint256 poolId) external override {\\n    PoolInfo memory pool = poolInfo[poolId];\\n    // don't use enabled for user to unstake from close pool\\n    if (pool.yieldToken == address(0)) revert PoolNotExisted(poolId);\\n\\n    StakePosition memory position = userStakes[poolId][msg.sender];\\n    uint256 accuReward = ((block.timestamp - position.lastCalcTs) *\\n      position.amount *\\n      pool.yieldAPY) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    uint256 rewardAmount = accuReward + position.pendingReward;\\n    uint256 stakeAmount = position.amount;\\n    delete userStakes[poolId][msg.sender];\\n    poolInfo[poolId].totalStaked -= stakeAmount;\\n\\n    TokenTransfer._transferToken(pool.stakeToken, msg.sender, stakeAmount);\\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, rewardAmount);\\n\\n    emit RewardClaim(poolId, pool.stakeToken, rewardAmount);\\n    emit Unstake(poolId, pool.stakeToken, position.amount, rewardAmount);\\n  }\\n\\n  function claimPendingReward(uint256 poolId) external override {\\n    PoolInfo memory pool = poolInfo[poolId];\\n    // don't use enabled for user to unstake from close pool\\n    if (pool.yieldToken == address(0)) revert PoolNotExisted(poolId);\\n\\n    StakePosition storage position = userStakes[poolId][msg.sender];\\n    if (position.amount == 0) revert NoStaking();\\n\\n    uint256 stakedAmount = position.amount;\\n    uint256 accuReward = ((block.timestamp - position.lastCalcTs) *\\n      stakedAmount *\\n      pool.yieldAPY) /\\n      YIELD_DENOM /\\n      365 /\\n      86400;\\n\\n    uint256 rewardAmount = accuReward + position.pendingReward;\\n    position.pendingReward = 0;\\n    position.lastCalcTs = block.timestamp;\\n\\n    TokenTransfer._mintToken(pool.yieldToken, msg.sender, rewardAmount);\\n\\n    emit RewardClaim(poolId, pool.stakeToken, rewardAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x1b35c244c6a5433f8c318f1fc499f3dcfc9523d61a647e7fef53f95c847122f0\",\"license\":\"MIT\"},\"contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE \\n}\\n\\ninterface IBlast{\\n    // configure\\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\\n\\n    // claim yield\\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(address contractAddress) external view returns (uint256);\\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\\n}\\n\",\"keccak256\":\"0xb94a575fdf3be5029b157f43ffe585167d2d911777e6af156ef17b8441275d2f\",\"license\":\"MIT\"},\"contracts/interface/IERC20Mintable.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n  function mint(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x201e45d0d2667fbafebc8f21057ce9e708056f2cda3011a567b5c0b9d3553124\",\"license\":\"MIT\"},\"contracts/interface/IERC20Rebasing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC20Mintable.sol\\\";\\n\\nenum RebaseYieldMode {\\n  AUTOMATIC,\\n  VOID,\\n  CLAIMABLE\\n}\\n\\ninterface IERC20Rebasing is IERC20Mintable {\\n  // changes the yield mode of the caller and update the balance\\n  // to reflect the configuration\\n  function configure(RebaseYieldMode) external returns (uint256);\\n\\n  // \\\"claimable\\\" yield mode accounts can call this this claim their yield\\n  // to another address\\n  function claim(address recipient, uint256 amount) external returns (uint256);\\n\\n  // read the claimable amount for an account\\n  function getClaimableAmount(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf7a4a255bc133fb7a28e193d933d2e39e8153d281d8fb6cbef599b45ee41dc3b\",\"license\":\"MIT\"},\"contracts/interface/INonLockStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface INonLockStaking {\\n  error NotPoolAdmin(address user);\\n  error InvalidArguments();\\n  error PoolClosed(uint256 id);\\n  error PoolNotExisted(uint256 id);\\n  error NoStaking();\\n\\n  struct StakePosition {\\n    uint256 amount;\\n    uint256 lastCalcTs; // last reward calculated timestamp\\n    uint256 pendingReward;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 yieldAPY;\\n    address yieldToken;\\n    address stakeToken;\\n    uint256 totalStaked;\\n    bool enabled;\\n  }\\n\\n  event PoolCreated(\\n    uint256 id,\\n    uint256 yieldAPY,\\n    address yieldToken,\\n    address stakeToken\\n  );\\n\\n  event Stake(\\n    uint256 poolId,\\n    uint256 yield,\\n    address yieldToken,\\n    address stakeToken,\\n    uint256 amount\\n  );\\n\\n  event Unstake(\\n    uint256 poolId,\\n    address stakeToken,\\n    uint256 totalAmount,\\n    uint256 rewardAmount\\n  );\\n\\n  event RewardClaim(\\n    uint256 poolId,\\n    address stakeToken,\\n    uint256 rewardAmount\\n  );\\n\\n  function stake(uint256 poolId, uint256 amount) external payable;\\n\\n  function unstake(uint256 poolId) external;\\n\\n  function claimPendingReward(uint256 poolId) external;\\n}\\n\",\"keccak256\":\"0x13dbe8ab75869d76b0164b16e8975a13fe1017e8c3040edd83abf404b7a81935\",\"license\":\"MIT\"},\"contracts/interface/IRoleControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IRoleControl is IAccessControl {\\n  \\n}\\n\",\"keccak256\":\"0x96b1f3c3213c5364a4f2a8a86ef2b582250684eb790964bc6ac7d776e5310ab1\",\"license\":\"MIT\"},\"contracts/lib/TokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/IERC20Mintable.sol\\\";\\n\\nlibrary TokenTransfer {\\n  using SafeERC20 for IERC20;\\n  error InvalidTokenAmounts(uint256 amount);\\n\\n  function _depositToken(address token, address from, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount != msg.value) revert InvalidTokenAmounts(amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, address(this), amount);\\n    }\\n  }\\n\\n  function _depositAndReturnSpare(address token, address from, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (amount > msg.value) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n      payable(from).transfer(msg.value - amount);\\n    } else {\\n      IERC20(token).safeTransferFrom(from, to, amount);\\n    }\\n  }\\n\\n  function _transferToken(address token, address to, uint256 amount) internal {\\n    if (token == address(0)) {\\n      if (address(this).balance < amount) revert InvalidTokenAmounts(amount);\\n      payable(to).transfer(amount);\\n    } else {\\n      IERC20(token).safeTransfer(to, amount);\\n    }\\n  }\\n\\n  function _mintToken(address token, address to, uint256 amount) internal {\\n    IERC20Mintable(token).mint(to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x5793004c88278f9dbf3c5545caf7694fab2ef5398043bd1037c485241f26e961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b61371880620001e26000396000f3fe6080604052600436106101355760003560e01c80637b0472f0116100ab578063b8f6dba71161006f578063b8f6dba7146103df578063c6cf7c5f1461040a578063cf85c2fb14610447578063d225481314610470578063f09a40161461049b578063f0f44260146104c457610135565b80637b0472f01461031d57806385036b6c1461033957806394caca16146103765780639a45228f1461039f578063a4951daf146103c857610135565b80632e17de78116100fd5780632e17de781461020f57806331a0edec1461023857806333ba88821461026357806337de615f146102a05780633959aaef146102c957806361d027b3146102f257610135565b80630f5baf611461013a5780631526fe2714610151578063166f323714610192578063175e1a7d146101bb57806319260c86146101e6575b600080fd5b34801561014657600080fd5b5061014f6104ed565b005b34801561015d57600080fd5b5061017860048036038101906101739190612b91565b6106b1565b604051610189959493929190612c29565b60405180910390f35b34801561019e57600080fd5b506101b960048036038101906101b49190612ca8565b610734565b005b3480156101c757600080fd5b506101d06108a2565b6040516101dd9190612d47565b60405180910390f35b3480156101f257600080fd5b5061020d60048036038101906102089190612d62565b6108c8565b005b34801561021b57600080fd5b5061023660048036038101906102319190612b91565b610aab565b005b34801561024457600080fd5b5061024d610e54565b60405161025a9190612db0565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190612dcb565b610e7a565b6040516102979190612e0b565b60405180910390f35b3480156102ac57600080fd5b506102c760048036038101906102c29190612b91565b611209565b005b3480156102d557600080fd5b506102f060048036038101906102eb9190612b91565b611356565b005b3480156102fe57600080fd5b50610307611637565b6040516103149190612e26565b60405180910390f35b61033760048036038101906103329190612e41565b61165d565b005b34801561034557600080fd5b50610360600480360381019061035b9190612dcb565b6119c2565b60405161036d9190612ed2565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190612ca8565b611a4b565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612e41565b611bcc565b005b3480156103d457600080fd5b506103dd611d9c565b005b3480156103eb57600080fd5b506103f4612001565b6040516104019190612f06565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612d62565b612025565b60405161043e9190612e26565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612d62565b612058565b005b34801561047c57600080fd5b5061048561221d565b6040516104929190612e0b565b60405180910390f35b3480156104a757600080fd5b506104c260048036038101906104bd9190612ca8565b612224565b005b3480156104d057600080fd5b506104eb60048036038101906104e69190612d62565b612413565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b815260040161056a929190612f21565b602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190612f76565b6105ec57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016105e39190612e26565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663860043b630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161066b929190612fa3565b6020604051808303816000875af115801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae9190612fe1565b50565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016107b1929190612f21565b602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190612f76565b61083357336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161082a9190612e26565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166336b91f2b836040518263ffffffff1660e01b815260040161086c9190612e26565b600060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610945929190612f21565b602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190612f76565b6109c757336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016109be9190612e26565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a33757d60026040518263ffffffff1660e01b8152600401610a649190613085565b6020604051808303816000875af1158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190612fe1565b5050565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610c1d57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610c149190612e0b565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006201518061016d620186a085600001518560000151866020015142610cc191906130cf565b610ccb9190613103565b610cd59190613103565b610cdf9190613174565b610ce99190613174565b610cf39190613174565b90506000826040015182610d0791906131a5565b90506000836000015190506005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160009055505080600460008881526020019081526020016000206003016000828254610da391906130cf565b92505081905550610db985604001513383612556565b610dc88560200151338461264c565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f386866040015184604051610dff939291906131d9565b60405180910390a17fc1e00202ee2c06861d326fc6374026b751863ff64218ccbaa38c3e603a8e72c2868660400151866000015185604051610e449493929190613210565b60405180910390a1505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610ef8929190612f21565b602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190612f76565b610f7a57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610f719190612e26565b60405180910390fd5b60008303610fb4576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361107e576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025491506040518060a001604052808581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160011515815250600460008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050506001826111bf91906131a5565b6002819055507fdf8d6ed0cc461638776b3ca70e85e07a489b1843721ce48af5e1edd7ceadd5fe828583866040516111fa9493929190613255565b60405180910390a15092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611286929190612f21565b602060405180830381865afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c79190612f76565b61130857336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016112ff9190612e26565b60405180910390fd5b60006004600083815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600460008381526020019081526020016000206000018190555050565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036114c857816040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016114bf9190612e0b565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001540361155a576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160000154905060006201518061016d620186a086600001518587600101544261158691906130cf565b6115909190613103565b61159a9190613103565b6115a49190613174565b6115ae9190613174565b6115b89190613174565b905060008360020154826115cc91906131a5565b9050600084600201819055504284600101819055506115f08560200151338361264c565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f386866040015183604051611627939291906131d9565b60405180910390a1505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000151581608001511515036117a757826040517feb0d37cc00000000000000000000000000000000000000000000000000000000815260040161179e9190612e0b565b60405180910390fd5b60006005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001540361189957604051806060016040528084815260200142815260200160008152506005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050611935565b60006201518061016d620186a0856000015185600001548660010154426118c091906130cf565b6118ca9190613103565b6118d49190613103565b6118de9190613174565b6118e89190613174565b6118f29190613174565b90504282600101819055508082600201600082825461191191906131a5565b925050819055508382600001600082825461192c91906131a5565b92505081905550505b8260046000868152602001908152602001600020600301600082825461195b91906131a5565b92505081905550611971826040015133856126be565b7f8cbcc18badd6d14ded750186c5461cc995c9b0311cf89a7d0c4f40f9e9a5f75784836000015184602001518560400151876040516119b495949392919061329a565b60405180910390a150505050565b6119ca612b35565b6005600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611ac8929190612f21565b602060405180830381865afa158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b099190612f76565b611b4a57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611b419190612e26565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611c49929190612f21565b602060405180830381865afa158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a9190612f76565b611ccb57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611cc29190612e26565b60405180910390fd5b6000821480611cda5750600081145b15611d11576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600015156004600084815260200190815260200160002060040160009054906101000a900460ff16151503611d7d57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401611d749190612e0b565b60405180910390fd5b8060046000848152602001908152602001600020600001819055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611e19929190612f21565b602060405180830381865afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190612f76565b611e9b57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611e929190612e26565b60405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12f3a61306040518263ffffffff1660e01b8152600401611ef89190612e26565b602060405180830381865afa158015611f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f399190612fe1565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aad3ec96600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611fba9291906132ed565b6020604051808303816000875af1158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190612fe1565b5050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016120d5929190612f21565b602060405180830381865afa1580156120f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121169190612f76565b61215757336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161214e9190612e26565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561220257600080fd5b505af1158015612216573d6000803e3d6000fd5b5050505050565b620186a081565b60008060019054906101000a900460ff161590508080156122555750600160008054906101000a900460ff1660ff16105b8061228257506122643061276e565b1580156122815750600160008054906101000a900460ff1660ff16145b5b6122c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b890613399565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156122fe576001600060016101000a81548160ff0219169083151502179055505b82600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146123b55781600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b801561240e5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516124059190613401565b60405180910390a15b505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401612490929190612f21565b602060405180830381865afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d19190612f76565b61251257336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016125099190612e26565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361261b57804710156125cf57806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016125c69190612e0b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612615573d6000803e3d6000fd5b50612647565b61264682828573ffffffffffffffffffffffffffffffffffffffff166127919092919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016126879291906132ed565b600060405180830381600087803b1580156126a157600080fd5b505af11580156126b5573d6000803e3d6000fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361273b5734811461273657806040517f83b9f0ae00000000000000000000000000000000000000000000000000000000815260040161272d9190612e0b565b60405180910390fd5b612769565b6127688230838673ffffffffffffffffffffffffffffffffffffffff16612817909392919063ffffffff16565b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6128128363a9059cbb60e01b84846040516024016127b09291906132ed565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128a0565b505050565b61289a846323b872dd60e01b8585856040516024016128389392919061341c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128a0565b50505050565b6000612902826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129689092919063ffffffff16565b90506000815114806129245750808060200190518101906129239190612f76565b5b612963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295a906134c5565b60405180910390fd5b505050565b60606129778484600085612980565b90509392505050565b6060824710156129c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bc90613557565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516129ee91906135e8565b60006040518083038185875af1925050503d8060008114612a2b576040519150601f19603f3d011682016040523d82523d6000602084013e612a30565b606091505b5091509150612a4187838387612a4d565b92505050949350505050565b60608315612aaf576000835103612aa757612a6785612ac2565b612aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9d9061364b565b60405180910390fd5b5b829050612aba565b612ab98383612ae5565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612af85781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2c91906136c0565b60405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b6000819050919050565b612b6e81612b5b565b8114612b7957600080fd5b50565b600081359050612b8b81612b65565b92915050565b600060208284031215612ba757612ba6612b56565b5b6000612bb584828501612b7c565b91505092915050565b612bc781612b5b565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bf882612bcd565b9050919050565b612c0881612bed565b82525050565b60008115159050919050565b612c2381612c0e565b82525050565b600060a082019050612c3e6000830188612bbe565b612c4b6020830187612bff565b612c586040830186612bff565b612c656060830185612bbe565b612c726080830184612c1a565b9695505050505050565b612c8581612bed565b8114612c9057600080fd5b50565b600081359050612ca281612c7c565b92915050565b60008060408385031215612cbf57612cbe612b56565b5b6000612ccd85828601612c93565b9250506020612cde85828601612c93565b9150509250929050565b6000819050919050565b6000612d0d612d08612d0384612bcd565b612ce8565b612bcd565b9050919050565b6000612d1f82612cf2565b9050919050565b6000612d3182612d14565b9050919050565b612d4181612d26565b82525050565b6000602082019050612d5c6000830184612d38565b92915050565b600060208284031215612d7857612d77612b56565b5b6000612d8684828501612c93565b91505092915050565b6000612d9a82612d14565b9050919050565b612daa81612d8f565b82525050565b6000602082019050612dc56000830184612da1565b92915050565b60008060408385031215612de257612de1612b56565b5b6000612df085828601612b7c565b9250506020612e0185828601612c93565b9150509250929050565b6000602082019050612e206000830184612bbe565b92915050565b6000602082019050612e3b6000830184612bff565b92915050565b60008060408385031215612e5857612e57612b56565b5b6000612e6685828601612b7c565b9250506020612e7785828601612b7c565b9150509250929050565b612e8a81612b5b565b82525050565b606082016000820151612ea66000850182612e81565b506020820151612eb96020850182612e81565b506040820151612ecc6040850182612e81565b50505050565b6000606082019050612ee76000830184612e90565b92915050565b6000819050919050565b612f0081612eed565b82525050565b6000602082019050612f1b6000830184612ef7565b92915050565b6000604082019050612f366000830185612ef7565b612f436020830184612bff565b9392505050565b612f5381612c0e565b8114612f5e57600080fd5b50565b600081519050612f7081612f4a565b92915050565b600060208284031215612f8c57612f8b612b56565b5b6000612f9a84828501612f61565b91505092915050565b6000604082019050612fb86000830185612bff565b612fc56020830184612bff565b9392505050565b600081519050612fdb81612b65565b92915050565b600060208284031215612ff757612ff6612b56565b5b600061300584828501612fcc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061304e5761304d61300e565b5b50565b600081905061305f8261303d565b919050565b600061306f82613051565b9050919050565b61307f81613064565b82525050565b600060208201905061309a6000830184613076565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130da82612b5b565b91506130e583612b5b565b92508282039050818111156130fd576130fc6130a0565b5b92915050565b600061310e82612b5b565b915061311983612b5b565b925082820261312781612b5b565b9150828204841483151761313e5761313d6130a0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061317f82612b5b565b915061318a83612b5b565b92508261319a57613199613145565b5b828204905092915050565b60006131b082612b5b565b91506131bb83612b5b565b92508282019050808211156131d3576131d26130a0565b5b92915050565b60006060820190506131ee6000830186612bbe565b6131fb6020830185612bff565b6132086040830184612bbe565b949350505050565b60006080820190506132256000830187612bbe565b6132326020830186612bff565b61323f6040830185612bbe565b61324c6060830184612bbe565b95945050505050565b600060808201905061326a6000830187612bbe565b6132776020830186612bbe565b6132846040830185612bff565b6132916060830184612bff565b95945050505050565b600060a0820190506132af6000830188612bbe565b6132bc6020830187612bbe565b6132c96040830186612bff565b6132d66060830185612bff565b6132e36080830184612bbe565b9695505050505050565b60006040820190506133026000830185612bff565b61330f6020830184612bbe565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613383602e83613316565b915061338e82613327565b604082019050919050565b600060208201905081810360008301526133b281613376565b9050919050565b6000819050919050565b600060ff82169050919050565b60006133eb6133e66133e1846133b9565b612ce8565b6133c3565b9050919050565b6133fb816133d0565b82525050565b600060208201905061341660008301846133f2565b92915050565b60006060820190506134316000830186612bff565b61343e6020830185612bff565b61344b6040830184612bbe565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006134af602a83613316565b91506134ba82613453565b604082019050919050565b600060208201905081810360008301526134de816134a2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613541602683613316565b915061354c826134e5565b604082019050919050565b6000602082019050818103600083015261357081613534565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156135ab578082015181840152602081019050613590565b60008484015250505050565b60006135c282613577565b6135cc8185613582565b93506135dc81856020860161358d565b80840191505092915050565b60006135f482846135b7565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613635601d83613316565b9150613640826135ff565b602082019050919050565b6000602082019050818103600083015261366481613628565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006136928261366b565b61369c8185613316565b93506136ac81856020860161358d565b6136b581613676565b840191505092915050565b600060208201905081810360008301526136da8184613687565b90509291505056fea2646970667358221220ad9f43dc12f5d8bc2096a805f53b72ded07c53df435e1bf315498a229337da8064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80637b0472f0116100ab578063b8f6dba71161006f578063b8f6dba7146103df578063c6cf7c5f1461040a578063cf85c2fb14610447578063d225481314610470578063f09a40161461049b578063f0f44260146104c457610135565b80637b0472f01461031d57806385036b6c1461033957806394caca16146103765780639a45228f1461039f578063a4951daf146103c857610135565b80632e17de78116100fd5780632e17de781461020f57806331a0edec1461023857806333ba88821461026357806337de615f146102a05780633959aaef146102c957806361d027b3146102f257610135565b80630f5baf611461013a5780631526fe2714610151578063166f323714610192578063175e1a7d146101bb57806319260c86146101e6575b600080fd5b34801561014657600080fd5b5061014f6104ed565b005b34801561015d57600080fd5b5061017860048036038101906101739190612b91565b6106b1565b604051610189959493929190612c29565b60405180910390f35b34801561019e57600080fd5b506101b960048036038101906101b49190612ca8565b610734565b005b3480156101c757600080fd5b506101d06108a2565b6040516101dd9190612d47565b60405180910390f35b3480156101f257600080fd5b5061020d60048036038101906102089190612d62565b6108c8565b005b34801561021b57600080fd5b5061023660048036038101906102319190612b91565b610aab565b005b34801561024457600080fd5b5061024d610e54565b60405161025a9190612db0565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190612dcb565b610e7a565b6040516102979190612e0b565b60405180910390f35b3480156102ac57600080fd5b506102c760048036038101906102c29190612b91565b611209565b005b3480156102d557600080fd5b506102f060048036038101906102eb9190612b91565b611356565b005b3480156102fe57600080fd5b50610307611637565b6040516103149190612e26565b60405180910390f35b61033760048036038101906103329190612e41565b61165d565b005b34801561034557600080fd5b50610360600480360381019061035b9190612dcb565b6119c2565b60405161036d9190612ed2565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190612ca8565b611a4b565b005b3480156103ab57600080fd5b506103c660048036038101906103c19190612e41565b611bcc565b005b3480156103d457600080fd5b506103dd611d9c565b005b3480156103eb57600080fd5b506103f4612001565b6040516104019190612f06565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612d62565b612025565b60405161043e9190612e26565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612d62565b612058565b005b34801561047c57600080fd5b5061048561221d565b6040516104929190612e0b565b60405180910390f35b3480156104a757600080fd5b506104c260048036038101906104bd9190612ca8565b612224565b005b3480156104d057600080fd5b506104eb60048036038101906104e69190612d62565b612413565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b815260040161056a929190612f21565b602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190612f76565b6105ec57336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016105e39190612e26565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663860043b630600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161066b929190612fa3565b6020604051808303816000875af115801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae9190612fe1565b50565b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16905085565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016107b1929190612f21565b602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190612f76565b61083357336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161082a9190612e26565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166336b91f2b836040518263ffffffff1660e01b815260040161086c9190612e26565b600060405180830381600087803b15801561088657600080fd5b505af115801561089a573d6000803e3d6000fd5b505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610945929190612f21565b602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190612f76565b6109c757336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016109be9190612e26565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a33757d60026040518263ffffffff1660e01b8152600401610a649190613085565b6020604051808303816000875af1158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190612fe1565b5050565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610c1d57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401610c149190612e0b565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006201518061016d620186a085600001518560000151866020015142610cc191906130cf565b610ccb9190613103565b610cd59190613103565b610cdf9190613174565b610ce99190613174565b610cf39190613174565b90506000826040015182610d0791906131a5565b90506000836000015190506005600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160009055505080600460008881526020019081526020016000206003016000828254610da391906130cf565b92505081905550610db985604001513383612556565b610dc88560200151338461264c565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f386866040015184604051610dff939291906131d9565b60405180910390a17fc1e00202ee2c06861d326fc6374026b751863ff64218ccbaa38c3e603a8e72c2868660400151866000015185604051610e449493929190613210565b60405180910390a1505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401610ef8929190612f21565b602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190612f76565b610f7a57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401610f719190612e26565b60405180910390fd5b60008303610fb4576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361107e576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025491506040518060a001604052808581526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160011515815250600460008481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050506001826111bf91906131a5565b6002819055507fdf8d6ed0cc461638776b3ca70e85e07a489b1843721ce48af5e1edd7ceadd5fe828583866040516111fa9493929190613255565b60405180910390a15092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611286929190612f21565b602060405180830381865afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c79190612f76565b61130857336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016112ff9190612e26565b60405180910390fd5b60006004600083815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506000600460008381526020019081526020016000206000018190555050565b6000600460008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036114c857816040517feb0d37cc0000000000000000000000000000000000000000000000000000000081526004016114bf9190612e0b565b60405180910390fd5b60006005600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001540361155a576040517fbaa8213400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160000154905060006201518061016d620186a086600001518587600101544261158691906130cf565b6115909190613103565b61159a9190613103565b6115a49190613174565b6115ae9190613174565b6115b89190613174565b905060008360020154826115cc91906131a5565b9050600084600201819055504284600101819055506115f08560200151338361264c565b7ff8a016136ec23af173a9a6d969a9fa0582a5099a74e1b53d91328789f14577f386866040015183604051611627939291906131d9565b60405180910390a1505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000151581608001511515036117a757826040517feb0d37cc00000000000000000000000000000000000000000000000000000000815260040161179e9190612e0b565b60405180910390fd5b60006005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001540361189957604051806060016040528084815260200142815260200160008152506005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050611935565b60006201518061016d620186a0856000015185600001548660010154426118c091906130cf565b6118ca9190613103565b6118d49190613103565b6118de9190613174565b6118e89190613174565b6118f29190613174565b90504282600101819055508082600201600082825461191191906131a5565b925050819055508382600001600082825461192c91906131a5565b92505081905550505b8260046000868152602001908152602001600020600301600082825461195b91906131a5565b92505081905550611971826040015133856126be565b7f8cbcc18badd6d14ded750186c5461cc995c9b0311cf89a7d0c4f40f9e9a5f75784836000015184602001518560400151876040516119b495949392919061329a565b60405180910390a150505050565b6119ca612b35565b6005600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611ac8929190612f21565b602060405180830381865afa158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b099190612f76565b611b4a57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611b419190612e26565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611c49929190612f21565b602060405180830381865afa158015611c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8a9190612f76565b611ccb57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611cc29190612e26565b60405180910390fd5b6000821480611cda5750600081145b15611d11576040517f5f6f132c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600015156004600084815260200190815260200160002060040160009054906101000a900460ff16151503611d7d57816040517feb0d37cc000000000000000000000000000000000000000000000000000000008152600401611d749190612e0b565b60405180910390fd5b8060046000848152602001908152602001600020600001819055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401611e19929190612f21565b602060405180830381865afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190612f76565b611e9b57336040517f7e652f1e000000000000000000000000000000000000000000000000000000008152600401611e929190612e26565b60405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e12f3a61306040518263ffffffff1660e01b8152600401611ef89190612e26565b602060405180830381865afa158015611f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f399190612fe1565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aad3ec96600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611fba9291906132ed565b6020604051808303816000875af1158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd9190612fe1565b5050565b7f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa81565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b81526004016120d5929190612f21565b602060405180830381865afa1580156120f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121169190612f76565b61215757336040517f7e652f1e00000000000000000000000000000000000000000000000000000000815260040161214e9190612e26565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f098767a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561220257600080fd5b505af1158015612216573d6000803e3d6000fd5b5050505050565b620186a081565b60008060019054906101000a900460ff161590508080156122555750600160008054906101000a900460ff1660ff16105b8061228257506122643061276e565b1580156122815750600160008054906101000a900460ff1660ff16145b5b6122c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b890613399565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156122fe576001600060016101000a81548160ff0219169083151502179055505b82600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146123b55781600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b801561240e5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516124059190613401565b60405180910390a15b505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f24e583e35a20f9ecfc1572e7cb66bcc18ad3cd1650ec40dbf6ad2290e553a9fa336040518363ffffffff1660e01b8152600401612490929190612f21565b602060405180830381865afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d19190612f76565b61251257336040517f7e652f1e0000000000000000000000000000000000000000000000000000000081526004016125099190612e26565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361261b57804710156125cf57806040517f83b9f0ae0000000000000000000000000000000000000000000000000000000081526004016125c69190612e0b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612615573d6000803e3d6000fd5b50612647565b61264682828573ffffffffffffffffffffffffffffffffffffffff166127919092919063ffffffff16565b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016126879291906132ed565b600060405180830381600087803b1580156126a157600080fd5b505af11580156126b5573d6000803e3d6000fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361273b5734811461273657806040517f83b9f0ae00000000000000000000000000000000000000000000000000000000815260040161272d9190612e0b565b60405180910390fd5b612769565b6127688230838673ffffffffffffffffffffffffffffffffffffffff16612817909392919063ffffffff16565b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6128128363a9059cbb60e01b84846040516024016127b09291906132ed565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128a0565b505050565b61289a846323b872dd60e01b8585856040516024016128389392919061341c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128a0565b50505050565b6000612902826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129689092919063ffffffff16565b90506000815114806129245750808060200190518101906129239190612f76565b5b612963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295a906134c5565b60405180910390fd5b505050565b60606129778484600085612980565b90509392505050565b6060824710156129c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bc90613557565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516129ee91906135e8565b60006040518083038185875af1925050503d8060008114612a2b576040519150601f19603f3d011682016040523d82523d6000602084013e612a30565b606091505b5091509150612a4187838387612a4d565b92505050949350505050565b60608315612aaf576000835103612aa757612a6785612ac2565b612aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9d9061364b565b60405180910390fd5b5b829050612aba565b612ab98383612ae5565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612af85781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2c91906136c0565b60405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b6000819050919050565b612b6e81612b5b565b8114612b7957600080fd5b50565b600081359050612b8b81612b65565b92915050565b600060208284031215612ba757612ba6612b56565b5b6000612bb584828501612b7c565b91505092915050565b612bc781612b5b565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bf882612bcd565b9050919050565b612c0881612bed565b82525050565b60008115159050919050565b612c2381612c0e565b82525050565b600060a082019050612c3e6000830188612bbe565b612c4b6020830187612bff565b612c586040830186612bff565b612c656060830185612bbe565b612c726080830184612c1a565b9695505050505050565b612c8581612bed565b8114612c9057600080fd5b50565b600081359050612ca281612c7c565b92915050565b60008060408385031215612cbf57612cbe612b56565b5b6000612ccd85828601612c93565b9250506020612cde85828601612c93565b9150509250929050565b6000819050919050565b6000612d0d612d08612d0384612bcd565b612ce8565b612bcd565b9050919050565b6000612d1f82612cf2565b9050919050565b6000612d3182612d14565b9050919050565b612d4181612d26565b82525050565b6000602082019050612d5c6000830184612d38565b92915050565b600060208284031215612d7857612d77612b56565b5b6000612d8684828501612c93565b91505092915050565b6000612d9a82612d14565b9050919050565b612daa81612d8f565b82525050565b6000602082019050612dc56000830184612da1565b92915050565b60008060408385031215612de257612de1612b56565b5b6000612df085828601612b7c565b9250506020612e0185828601612c93565b9150509250929050565b6000602082019050612e206000830184612bbe565b92915050565b6000602082019050612e3b6000830184612bff565b92915050565b60008060408385031215612e5857612e57612b56565b5b6000612e6685828601612b7c565b9250506020612e7785828601612b7c565b9150509250929050565b612e8a81612b5b565b82525050565b606082016000820151612ea66000850182612e81565b506020820151612eb96020850182612e81565b506040820151612ecc6040850182612e81565b50505050565b6000606082019050612ee76000830184612e90565b92915050565b6000819050919050565b612f0081612eed565b82525050565b6000602082019050612f1b6000830184612ef7565b92915050565b6000604082019050612f366000830185612ef7565b612f436020830184612bff565b9392505050565b612f5381612c0e565b8114612f5e57600080fd5b50565b600081519050612f7081612f4a565b92915050565b600060208284031215612f8c57612f8b612b56565b5b6000612f9a84828501612f61565b91505092915050565b6000604082019050612fb86000830185612bff565b612fc56020830184612bff565b9392505050565b600081519050612fdb81612b65565b92915050565b600060208284031215612ff757612ff6612b56565b5b600061300584828501612fcc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061304e5761304d61300e565b5b50565b600081905061305f8261303d565b919050565b600061306f82613051565b9050919050565b61307f81613064565b82525050565b600060208201905061309a6000830184613076565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130da82612b5b565b91506130e583612b5b565b92508282039050818111156130fd576130fc6130a0565b5b92915050565b600061310e82612b5b565b915061311983612b5b565b925082820261312781612b5b565b9150828204841483151761313e5761313d6130a0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061317f82612b5b565b915061318a83612b5b565b92508261319a57613199613145565b5b828204905092915050565b60006131b082612b5b565b91506131bb83612b5b565b92508282019050808211156131d3576131d26130a0565b5b92915050565b60006060820190506131ee6000830186612bbe565b6131fb6020830185612bff565b6132086040830184612bbe565b949350505050565b60006080820190506132256000830187612bbe565b6132326020830186612bff565b61323f6040830185612bbe565b61324c6060830184612bbe565b95945050505050565b600060808201905061326a6000830187612bbe565b6132776020830186612bbe565b6132846040830185612bff565b6132916060830184612bff565b95945050505050565b600060a0820190506132af6000830188612bbe565b6132bc6020830187612bbe565b6132c96040830186612bff565b6132d66060830185612bff565b6132e36080830184612bbe565b9695505050505050565b60006040820190506133026000830185612bff565b61330f6020830184612bbe565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613383602e83613316565b915061338e82613327565b604082019050919050565b600060208201905081810360008301526133b281613376565b9050919050565b6000819050919050565b600060ff82169050919050565b60006133eb6133e66133e1846133b9565b612ce8565b6133c3565b9050919050565b6133fb816133d0565b82525050565b600060208201905061341660008301846133f2565b92915050565b60006060820190506134316000830186612bff565b61343e6020830185612bff565b61344b6040830184612bbe565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006134af602a83613316565b91506134ba82613453565b604082019050919050565b600060208201905081810360008301526134de816134a2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613541602683613316565b915061354c826134e5565b604082019050919050565b6000602082019050818103600083015261357081613534565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156135ab578082015181840152602081019050613590565b60008484015250505050565b60006135c282613577565b6135cc8185613582565b93506135dc81856020860161358d565b80840191505092915050565b60006135f482846135b7565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613635601d83613316565b9150613640826135ff565b602082019050919050565b6000602082019050818103600083015261366481613628565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006136928261366b565b61369c8185613316565b93506136ac81856020860161358d565b6136b581613676565b840191505092915050565b600060208201905081810360008301526136da8184613687565b90509291505056fea2646970667358221220ad9f43dc12f5d8bc2096a805f53b72ded07c53df435e1bf315498a229337da8064736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "setBlast(address)": {
        "params": {
          "_blast": "blast address"
        }
      },
      "setUSDBRebasing(address)": {
        "params": {
          "usdb": "USDB token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimUSDBYield()": {
        "notice": "Admin claims native USDB yield and send to treasury address"
      },
      "setBlast(address)": {
        "notice": "set native blast contract"
      },
      "setUSDBRebasing(address)": {
        "notice": "set USDB token address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1430,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "roleControl",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IRoleControl)2463"
      },
      {
        "astId": 1432,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1434,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "nextPoolId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1438,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "yieldTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1443,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)2399_storage)"
      },
      {
        "astId": 1450,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "userStakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakePosition)2388_storage))"
      },
      {
        "astId": 1455,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "listUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1458,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "USDB",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20Rebasing)2363"
      },
      {
        "astId": 1461,
        "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
        "label": "blast",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBlast)2316"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlast)2316": {
        "encoding": "inplace",
        "label": "contract IBlast",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Rebasing)2363": {
        "encoding": "inplace",
        "label": "contract IERC20Rebasing",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleControl)2463": {
        "encoding": "inplace",
        "label": "contract IRoleControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(StakePosition)2388_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INonLockStaking.StakePosition)",
        "numberOfBytes": "32",
        "value": "t_struct(StakePosition)2388_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakePosition)2388_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct INonLockStaking.StakePosition))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StakePosition)2388_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)2399_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct INonLockStaking.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)2399_storage"
      },
      "t_struct(PoolInfo)2399_storage": {
        "encoding": "inplace",
        "label": "struct INonLockStaking.PoolInfo",
        "members": [
          {
            "astId": 2390,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "yieldAPY",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2392,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "yieldToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2394,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "stakeToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2396,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "totalStaked",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2398,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "enabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakePosition)2388_storage": {
        "encoding": "inplace",
        "label": "struct INonLockStaking.StakePosition",
        "members": [
          {
            "astId": 2383,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2385,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "lastCalcTs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2387,
            "contract": "contracts/NonLockStakingPools.sol:NonLockStakingPools",
            "label": "pendingReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}